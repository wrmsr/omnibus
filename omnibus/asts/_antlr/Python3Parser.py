# flake8: noqa
# type: ignore
# Generated from Python3.g4 by ANTLR 4.8
# encoding: utf-8
from ..._vendor.antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3e")
        buf.write("\u0466\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\3\2\3\2\3\2\3\2\3\2\5\2\u00c8\n\2\3\3")
        buf.write("\3\3\7\3\u00cc\n\3\f\3\16\3\u00cf\13\3\3\3\3\3\3\4\3\4")
        buf.write("\7\4\u00d5\n\4\f\4\16\4\u00d8\13\4\3\4\3\4\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u00e0\n\5\3\5\5\5\u00e3\n\5\3\5\3\5\3\6\6\6\u00e8")
        buf.write("\n\6\r\6\16\6\u00e9\3\7\3\7\3\7\3\7\5\7\u00f0\n\7\3\b")
        buf.write("\3\b\3\b\3\t\3\t\3\t\3\t\3\t\5\t\u00fa\n\t\3\t\3\t\3\t")
        buf.write("\3\n\3\n\5\n\u0101\n\n\3\n\3\n\3\13\3\13\5\13\u0107\n")
        buf.write("\13\3\13\3\13\3\13\5\13\u010c\n\13\3\13\5\13\u010f\n\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u0115\n\13\5\13\u0117\n\13\5")
        buf.write("\13\u0119\n\13\3\13\3\13\3\13\5\13\u011e\n\13\5\13\u0120")
        buf.write("\n\13\5\13\u0122\n\13\3\13\3\13\5\13\u0126\n\13\3\13\5")
        buf.write("\13\u0129\n\13\3\13\3\13\3\13\3\13\5\13\u012f\n\13\5\13")
        buf.write("\u0131\n\13\5\13\u0133\n\13\3\13\3\13\3\13\5\13\u0138")
        buf.write("\n\13\5\13\u013a\n\13\3\f\3\f\6\f\u013e\n\f\r\f\16\f\u013f")
        buf.write("\3\r\3\r\3\r\5\r\u0145\n\r\3\16\3\16\3\16\5\16\u014a\n")
        buf.write("\16\3\17\3\17\3\17\5\17\u014f\n\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0155\n\17\7\17\u0157\n\17\f\17\16\17\u015a\13\17")
        buf.write("\3\17\3\17\3\17\5\17\u015f\n\17\3\17\3\17\3\17\3\17\5")
        buf.write("\17\u0165\n\17\7\17\u0167\n\17\f\17\16\17\u016a\13\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u0170\n\17\5\17\u0172\n\17\5")
        buf.write("\17\u0174\n\17\3\17\3\17\3\17\5\17\u0179\n\17\5\17\u017b")
        buf.write("\n\17\5\17\u017d\n\17\3\17\3\17\5\17\u0181\n\17\3\17\3")
        buf.write("\17\3\17\3\17\5\17\u0187\n\17\7\17\u0189\n\17\f\17\16")
        buf.write("\17\u018c\13\17\3\17\3\17\3\17\3\17\5\17\u0192\n\17\5")
        buf.write("\17\u0194\n\17\5\17\u0196\n\17\3\17\3\17\3\17\5\17\u019b")
        buf.write("\n\17\5\17\u019d\n\17\3\20\3\20\3\21\3\21\5\21\u01a3\n")
        buf.write("\21\3\22\3\22\3\22\7\22\u01a8\n\22\f\22\16\22\u01ab\13")
        buf.write("\22\3\22\5\22\u01ae\n\22\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u01ba\n\23\3\24\3\24\3\24\3")
        buf.write("\25\3\25\3\25\3\25\5\25\u01c3\n\25\3\25\3\25\3\25\5\25")
        buf.write("\u01c8\n\25\7\25\u01ca\n\25\f\25\16\25\u01cd\13\25\5\25")
        buf.write("\u01cf\n\25\3\26\3\26\3\26\3\26\5\26\u01d5\n\26\3\27\3")
        buf.write("\27\5\27\u01d9\n\27\3\27\3\27\3\27\5\27\u01de\n\27\7\27")
        buf.write("\u01e0\n\27\f\27\16\27\u01e3\13\27\3\27\5\27\u01e6\n\27")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u01f4\n\33\3\34\3\34\3\35\3\35\3\36\3\36\5")
        buf.write("\36\u01fc\n\36\3\37\3\37\3 \3 \3 \3 \5 \u0204\n \5 \u0206")
        buf.write("\n \3!\3!\5!\u020a\n!\3\"\3\"\3\"\3#\3#\7#\u0211\n#\f")
        buf.write("#\16#\u0214\13#\3#\3#\6#\u0218\n#\r#\16#\u0219\5#\u021c")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0225\n#\3$\3$\3$\5$\u022a")
        buf.write("\n$\3%\3%\3%\5%\u022f\n%\3&\3&\3&\7&\u0234\n&\f&\16&\u0237")
        buf.write("\13&\3&\5&\u023a\n&\3\'\3\'\3\'\7\'\u023f\n\'\f\'\16\'")
        buf.write("\u0242\13\'\3(\3(\3(\7(\u0247\n(\f(\16(\u024a\13(\3)\3")
        buf.write(")\3)\3)\7)\u0250\n)\f)\16)\u0253\13)\3*\3*\3*\3*\7*\u0259")
        buf.write("\n*\f*\16*\u025c\13*\3+\3+\3+\3+\5+\u0262\n+\3,\3,\3,")
        buf.write("\3,\3,\3,\3,\3,\3,\5,\u026d\n,\3-\3-\3-\3-\5-\u0273\n")
        buf.write("-\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u027e\n.\f.\16.\u0281")
        buf.write("\13.\3.\3.\3.\5.\u0286\n.\3/\3/\3/\3/\3/\3/\3/\5/\u028f")
        buf.write("\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60")
        buf.write("\u029a\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\6\61\u02a3")
        buf.write("\n\61\r\61\16\61\u02a4\3\61\3\61\3\61\5\61\u02aa\n\61")
        buf.write("\3\61\3\61\3\61\5\61\u02af\n\61\3\61\3\61\3\61\5\61\u02b4")
        buf.write("\n\61\3\62\3\62\3\62\3\62\7\62\u02ba\n\62\f\62\16\62\u02bd")
        buf.write("\13\62\3\62\3\62\3\62\3\63\3\63\3\63\5\63\u02c5\n\63\3")
        buf.write("\64\3\64\3\64\3\64\5\64\u02cb\n\64\5\64\u02cd\n\64\3\65")
        buf.write("\3\65\3\65\3\65\6\65\u02d3\n\65\r\65\16\65\u02d4\3\65")
        buf.write("\3\65\5\65\u02d9\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5")
        buf.write("\66\u02e1\n\66\3\66\5\66\u02e4\n\66\3\67\3\67\5\67\u02e8")
        buf.write("\n\67\38\38\58\u02ec\n8\38\38\38\39\39\59\u02f3\n9\39")
        buf.write("\39\39\3:\3:\3:\7:\u02fb\n:\f:\16:\u02fe\13:\3;\3;\3;")
        buf.write("\7;\u0303\n;\f;\16;\u0306\13;\3<\3<\3<\5<\u030b\n<\3=")
        buf.write("\3=\3=\3=\7=\u0311\n=\f=\16=\u0314\13=\3>\3>\3>\3>\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0323\n>\3?\3?\3?\3@\3@\7")
        buf.write("@\u032a\n@\f@\16@\u032d\13@\3A\3A\3A\3B\3B\7B\u0334\n")
        buf.write("B\fB\16B\u0337\13B\3C\3C\3C\3D\3D\7D\u033e\nD\fD\16D\u0341")
        buf.write("\13D\3E\3E\3E\3F\3F\7F\u0348\nF\fF\16F\u034b\13F\3G\3")
        buf.write("G\3G\3H\3H\7H\u0352\nH\fH\16H\u0355\13H\3I\3I\3I\3J\3")
        buf.write("J\7J\u035c\nJ\fJ\16J\u035f\13J\3K\3K\3K\3L\3L\3L\5L\u0367")
        buf.write("\nL\3M\3M\3M\5M\u036c\nM\3N\5N\u036f\nN\3N\3N\7N\u0373")
        buf.write("\nN\fN\16N\u0376\13N\3O\3O\3O\5O\u037b\nO\3O\3O\3O\5O")
        buf.write("\u0380\nO\3O\3O\3O\5O\u0385\nO\3O\3O\5O\u0389\nO\3P\3")
        buf.write("P\3P\6P\u038e\nP\rP\16P\u038f\3P\3P\3P\3P\5P\u0396\nP")
        buf.write("\3Q\3Q\5Q\u039a\nQ\3Q\3Q\3Q\3Q\5Q\u03a0\nQ\7Q\u03a2\n")
        buf.write("Q\fQ\16Q\u03a5\13Q\3Q\5Q\u03a8\nQ\5Q\u03aa\nQ\3R\3R\5")
        buf.write("R\u03ae\nR\3R\3R\3R\3R\3R\3R\3R\5R\u03b7\nR\3S\3S\3S\7")
        buf.write("S\u03bc\nS\fS\16S\u03bf\13S\3S\5S\u03c2\nS\3T\3T\5T\u03c6")
        buf.write("\nT\3T\3T\5T\u03ca\nT\3T\5T\u03cd\nT\5T\u03cf\nT\3U\3")
        buf.write("U\5U\u03d3\nU\3V\3V\5V\u03d7\nV\3V\3V\3V\5V\u03dc\nV\7")
        buf.write("V\u03de\nV\fV\16V\u03e1\13V\3V\5V\u03e4\nV\3W\3W\3W\7")
        buf.write("W\u03e9\nW\fW\16W\u03ec\13W\3W\5W\u03ef\nW\3X\3X\3X\3")
        buf.write("X\3X\3X\5X\u03f7\nX\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0401\n")
        buf.write("X\7X\u0403\nX\fX\16X\u0406\13X\3X\5X\u0409\nX\5X\u040b")
        buf.write("\nX\3X\3X\5X\u040f\nX\3X\3X\3X\3X\5X\u0415\nX\7X\u0417")
        buf.write("\nX\fX\16X\u041a\13X\3X\5X\u041d\nX\5X\u041f\nX\5X\u0421")
        buf.write("\nX\3Y\3Y\3Y\3Y\5Y\u0427\nY\3Y\5Y\u042a\nY\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3Z\7Z\u0432\nZ\fZ\16Z\u0435\13Z\3Z\5Z\u0438\nZ\3")
        buf.write("[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u0446\n[\3\\\3\\")
        buf.write("\5\\\u044a\n\\\3]\5]\u044d\n]\3]\3]\3]\3]\3]\5]\u0454")
        buf.write("\n]\3^\3^\3^\5^\u0459\n^\3_\3_\3`\3`\5`\u045f\n`\3a\3")
        buf.write("a\3a\5a\u0464\na\3a\2\2b\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\2\b\r")
        buf.write("\2\64\65::AAHHJJOPWWZZ\\\\__aa\3\2BC\4\2II[[\4\2\63\63")
        buf.write("MM\7\299@@GGNN^^\5\2\63\63MMSS\2\u04d7\2\u00c7\3\2\2\2")
        buf.write("\4\u00cd\3\2\2\2\6\u00d2\3\2\2\2\b\u00db\3\2\2\2\n\u00e7")
        buf.write("\3\2\2\2\f\u00eb\3\2\2\2\16\u00f1\3\2\2\2\20\u00f4\3\2")
        buf.write("\2\2\22\u00fe\3\2\2\2\24\u0139\3\2\2\2\26\u013d\3\2\2")
        buf.write("\2\30\u0141\3\2\2\2\32\u0146\3\2\2\2\34\u019c\3\2\2\2")
        buf.write("\36\u019e\3\2\2\2 \u01a2\3\2\2\2\"\u01a4\3\2\2\2$\u01b9")
        buf.write("\3\2\2\2&\u01bb\3\2\2\2(\u01ce\3\2\2\2*\u01d0\3\2\2\2")
        buf.write(",\u01d8\3\2\2\2.\u01e7\3\2\2\2\60\u01e9\3\2\2\2\62\u01ec")
        buf.write("\3\2\2\2\64\u01f3\3\2\2\2\66\u01f5\3\2\2\28\u01f7\3\2")
        buf.write("\2\2:\u01f9\3\2\2\2<\u01fd\3\2\2\2>\u01ff\3\2\2\2@\u0209")
        buf.write("\3\2\2\2B\u020b\3\2\2\2D\u020e\3\2\2\2F\u0226\3\2\2\2")
        buf.write("H\u022b\3\2\2\2J\u0230\3\2\2\2L\u023b\3\2\2\2N\u0243\3")
        buf.write("\2\2\2P\u024b\3\2\2\2R\u0254\3\2\2\2T\u025d\3\2\2\2V\u026c")
        buf.write("\3\2\2\2X\u026e\3\2\2\2Z\u0274\3\2\2\2\\\u0287\3\2\2\2")
        buf.write("^\u0290\3\2\2\2`\u029b\3\2\2\2b\u02b5\3\2\2\2d\u02c1\3")
        buf.write("\2\2\2f\u02c6\3\2\2\2h\u02d8\3\2\2\2j\u02e3\3\2\2\2l\u02e7")
        buf.write("\3\2\2\2n\u02e9\3\2\2\2p\u02f0\3\2\2\2r\u02f7\3\2\2\2")
        buf.write("t\u02ff\3\2\2\2v\u030a\3\2\2\2x\u030c\3\2\2\2z\u0322\3")
        buf.write("\2\2\2|\u0324\3\2\2\2~\u0327\3\2\2\2\u0080\u032e\3\2\2")
        buf.write("\2\u0082\u0331\3\2\2\2\u0084\u0338\3\2\2\2\u0086\u033b")
        buf.write("\3\2\2\2\u0088\u0342\3\2\2\2\u008a\u0345\3\2\2\2\u008c")
        buf.write("\u034c\3\2\2\2\u008e\u034f\3\2\2\2\u0090\u0356\3\2\2\2")
        buf.write("\u0092\u0359\3\2\2\2\u0094\u0360\3\2\2\2\u0096\u0366\3")
        buf.write("\2\2\2\u0098\u0368\3\2\2\2\u009a\u036e\3\2\2\2\u009c\u0388")
        buf.write("\3\2\2\2\u009e\u0395\3\2\2\2\u00a0\u0399\3\2\2\2\u00a2")
        buf.write("\u03b6\3\2\2\2\u00a4\u03b8\3\2\2\2\u00a6\u03ce\3\2\2\2")
        buf.write("\u00a8\u03d0\3\2\2\2\u00aa\u03d6\3\2\2\2\u00ac\u03e5\3")
        buf.write("\2\2\2\u00ae\u0420\3\2\2\2\u00b0\u0422\3\2\2\2\u00b2\u042e")
        buf.write("\3\2\2\2\u00b4\u0445\3\2\2\2\u00b6\u0449\3\2\2\2\u00b8")
        buf.write("\u044c\3\2\2\2\u00ba\u0455\3\2\2\2\u00bc\u045a\3\2\2\2")
        buf.write("\u00be\u045c\3\2\2\2\u00c0\u0463\3\2\2\2\u00c2\u00c8\7")
        buf.write(")\2\2\u00c3\u00c8\5\"\22\2\u00c4\u00c5\5V,\2\u00c5\u00c6")
        buf.write("\7)\2\2\u00c6\u00c8\3\2\2\2\u00c7\u00c2\3\2\2\2\u00c7")
        buf.write("\u00c3\3\2\2\2\u00c7\u00c4\3\2\2\2\u00c8\3\3\2\2\2\u00c9")
        buf.write("\u00cc\7)\2\2\u00ca\u00cc\5 \21\2\u00cb\u00c9\3\2\2\2")
        buf.write("\u00cb\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3\2\2\2\u00cf\u00cd")
        buf.write("\3\2\2\2\u00d0\u00d1\7\2\2\3\u00d1\5\3\2\2\2\u00d2\u00d6")
        buf.write("\5\u00acW\2\u00d3\u00d5\7)\2\2\u00d4\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2")
        buf.write("\u00d7\u00d9\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00da\7")
        buf.write("\2\2\3\u00da\7\3\2\2\2\u00db\u00dc\79\2\2\u00dc\u00e2")
        buf.write("\5N(\2\u00dd\u00df\7V\2\2\u00de\u00e0\5\u00b2Z\2\u00df")
        buf.write("\u00de\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2")
        buf.write("\u00e1\u00e3\7=\2\2\u00e2\u00dd\3\2\2\2\u00e2\u00e3\3")
        buf.write("\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\7)\2\2\u00e5\t")
        buf.write("\3\2\2\2\u00e6\u00e8\5\b\5\2\u00e7\u00e6\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2")
        buf.write("\u00ea\13\3\2\2\2\u00eb\u00ef\5\n\6\2\u00ec\u00f0\5\u00b0")
        buf.write("Y\2\u00ed\u00f0\5\20\t\2\u00ee\u00f0\5\16\b\2\u00ef\u00ec")
        buf.write("\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0")
        buf.write("\r\3\2\2\2\u00f1\u00f2\7\t\2\2\u00f2\u00f3\5\20\t\2\u00f3")
        buf.write("\17\3\2\2\2\u00f4\u00f5\7\16\2\2\u00f5\u00f6\7*\2\2\u00f6")
        buf.write("\u00f9\5\22\n\2\u00f7\u00f8\7\67\2\2\u00f8\u00fa\5j\66")
        buf.write("\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb")
        buf.write("\3\2\2\2\u00fb\u00fc\7>\2\2\u00fc\u00fd\5h\65\2\u00fd")
        buf.write("\21\3\2\2\2\u00fe\u0100\7V\2\2\u00ff\u0101\5\24\13\2\u0100")
        buf.write("\u00ff\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0103\7=\2\2\u0103\23\3\2\2\2\u0104\u0106\5\30")
        buf.write("\r\2\u0105\u0107\5\26\f\2\u0106\u0105\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u0121\3\2\2\2\u0108\u011f\7?\2\2\u0109")
        buf.write("\u010b\7^\2\2\u010a\u010c\5\32\16\2\u010b\u010a\3\2\2")
        buf.write("\2\u010b\u010c\3\2\2\2\u010c\u010e\3\2\2\2\u010d\u010f")
        buf.write("\5\26\f\2\u010e\u010d\3\2\2\2\u010e\u010f\3\2\2\2\u010f")
        buf.write("\u0118\3\2\2\2\u0110\u0116\7?\2\2\u0111\u0112\7Y\2\2\u0112")
        buf.write("\u0114\5\32\16\2\u0113\u0115\7?\2\2\u0114\u0113\3\2\2")
        buf.write("\2\u0114\u0115\3\2\2\2\u0115\u0117\3\2\2\2\u0116\u0111")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2\u0118")
        buf.write("\u0110\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0120\3\2\2\2")
        buf.write("\u011a\u011b\7Y\2\2\u011b\u011d\5\32\16\2\u011c\u011e")
        buf.write("\7?\2\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u0120\3\2\2\2\u011f\u0109\3\2\2\2\u011f\u011a\3\2\2\2")
        buf.write("\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121\u0108\3")
        buf.write("\2\2\2\u0121\u0122\3\2\2\2\u0122\u013a\3\2\2\2\u0123\u0125")
        buf.write("\7^\2\2\u0124\u0126\5\32\16\2\u0125\u0124\3\2\2\2\u0125")
        buf.write("\u0126\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u0129\5\26\f")
        buf.write("\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0132")
        buf.write("\3\2\2\2\u012a\u0130\7?\2\2\u012b\u012c\7Y\2\2\u012c\u012e")
        buf.write("\5\32\16\2\u012d\u012f\7?\2\2\u012e\u012d\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u012b\3\2\2\2")
        buf.write("\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2\u0132\u012a\3")
        buf.write("\2\2\2\u0132\u0133\3\2\2\2\u0133\u013a\3\2\2\2\u0134\u0135")
        buf.write("\7Y\2\2\u0135\u0137\5\32\16\2\u0136\u0138\7?\2\2\u0137")
        buf.write("\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2")
        buf.write("\u0139\u0104\3\2\2\2\u0139\u0123\3\2\2\2\u0139\u0134\3")
        buf.write("\2\2\2\u013a\25\3\2\2\2\u013b\u013c\7?\2\2\u013c\u013e")
        buf.write("\5\30\r\2\u013d\u013b\3\2\2\2\u013e\u013f\3\2\2\2\u013f")
        buf.write("\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\27\3\2\2\2\u0141")
        buf.write("\u0144\5\32\16\2\u0142\u0143\78\2\2\u0143\u0145\5j\66")
        buf.write("\2\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\31\3")
        buf.write("\2\2\2\u0146\u0149\7*\2\2\u0147\u0148\7>\2\2\u0148\u014a")
        buf.write("\5j\66\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\33\3\2\2\2\u014b\u014e\5\36\20\2\u014c\u014d\78\2\2\u014d")
        buf.write("\u014f\5j\66\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2")
        buf.write("\u014f\u0158\3\2\2\2\u0150\u0151\7?\2\2\u0151\u0154\5")
        buf.write("\36\20\2\u0152\u0153\78\2\2\u0153\u0155\5j\66\2\u0154")
        buf.write("\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157\3\2\2\2")
        buf.write("\u0156\u0150\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3")
        buf.write("\2\2\2\u0158\u0159\3\2\2\2\u0159\u017c\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015b\u017a\7?\2\2\u015c\u015e\7^\2\2\u015d\u015f")
        buf.write("\5\36\20\2\u015e\u015d\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0168\3\2\2\2\u0160\u0161\7?\2\2\u0161\u0164\5\36\20")
        buf.write("\2\u0162\u0163\78\2\2\u0163\u0165\5j\66\2\u0164\u0162")
        buf.write("\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0167\3\2\2\2\u0166")
        buf.write("\u0160\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3\2\2\2")
        buf.write("\u0168\u0169\3\2\2\2\u0169\u0173\3\2\2\2\u016a\u0168\3")
        buf.write("\2\2\2\u016b\u0171\7?\2\2\u016c\u016d\7Y\2\2\u016d\u016f")
        buf.write("\5\36\20\2\u016e\u0170\7?\2\2\u016f\u016e\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u0172\3\2\2\2\u0171\u016c\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2\u0173\u016b\3")
        buf.write("\2\2\2\u0173\u0174\3\2\2\2\u0174\u017b\3\2\2\2\u0175\u0176")
        buf.write("\7Y\2\2\u0176\u0178\5\36\20\2\u0177\u0179\7?\2\2\u0178")
        buf.write("\u0177\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017b\3\2\2\2")
        buf.write("\u017a\u015c\3\2\2\2\u017a\u0175\3\2\2\2\u017a\u017b\3")
        buf.write("\2\2\2\u017b\u017d\3\2\2\2\u017c\u015b\3\2\2\2\u017c\u017d")
        buf.write("\3\2\2\2\u017d\u019d\3\2\2\2\u017e\u0180\7^\2\2\u017f")
        buf.write("\u0181\5\36\20\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2\2")
        buf.write("\2\u0181\u018a\3\2\2\2\u0182\u0183\7?\2\2\u0183\u0186")
        buf.write("\5\36\20\2\u0184\u0185\78\2\2\u0185\u0187\5j\66\2\u0186")
        buf.write("\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0189\3\2\2\2")
        buf.write("\u0188\u0182\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3")
        buf.write("\2\2\2\u018a\u018b\3\2\2\2\u018b\u0195\3\2\2\2\u018c\u018a")
        buf.write("\3\2\2\2\u018d\u0193\7?\2\2\u018e\u018f\7Y\2\2\u018f\u0191")
        buf.write("\5\36\20\2\u0190\u0192\7?\2\2\u0191\u0190\3\2\2\2\u0191")
        buf.write("\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u018e\3\2\2\2")
        buf.write("\u0193\u0194\3\2\2\2\u0194\u0196\3\2\2\2\u0195\u018d\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u019d\3\2\2\2\u0197\u0198")
        buf.write("\7Y\2\2\u0198\u019a\5\36\20\2\u0199\u019b\7?\2\2\u019a")
        buf.write("\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d\3\2\2\2")
        buf.write("\u019c\u014b\3\2\2\2\u019c\u017e\3\2\2\2\u019c\u0197\3")
        buf.write("\2\2\2\u019d\35\3\2\2\2\u019e\u019f\7*\2\2\u019f\37\3")
        buf.write("\2\2\2\u01a0\u01a3\5\"\22\2\u01a1\u01a3\5V,\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a2\u01a1\3\2\2\2\u01a3!\3\2\2\2\u01a4\u01a9")
        buf.write("\5$\23\2\u01a5\u01a6\7]\2\2\u01a6\u01a8\5$\23\2\u01a7")
        buf.write("\u01a5\3\2\2\2\u01a8\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3")
        buf.write("\2\2\2\u01ac\u01ae\7]\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\7)\2\2\u01b0")
        buf.write("#\3\2\2\2\u01b1\u01ba\5&\24\2\u01b2\u01ba\5\60\31\2\u01b3")
        buf.write("\u01ba\5\62\32\2\u01b4\u01ba\5\64\33\2\u01b5\u01ba\5@")
        buf.write("!\2\u01b6\u01ba\5P)\2\u01b7\u01ba\5R*\2\u01b8\u01ba\5")
        buf.write("T+\2\u01b9\u01b1\3\2\2\2\u01b9\u01b2\3\2\2\2\u01b9\u01b3")
        buf.write("\3\2\2\2\u01b9\u01b4\3\2\2\2\u01b9\u01b5\3\2\2\2\u01b9")
        buf.write("\u01b6\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01b8\3\2\2\2")
        buf.write("\u01ba%\3\2\2\2\u01bb\u01bc\5,\27\2\u01bc\u01bd\5(\25")
        buf.write("\2\u01bd\'\3\2\2\2\u01be\u01cf\5*\26\2\u01bf\u01c2\5.")
        buf.write("\30\2\u01c0\u01c3\5\u00be`\2\u01c1\u01c3\5\u00acW\2\u01c2")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3\u01cf\3\2\2\2")
        buf.write("\u01c4\u01c7\78\2\2\u01c5\u01c8\5\u00be`\2\u01c6\u01c8")
        buf.write("\5,\27\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2\2\u01c8")
        buf.write("\u01ca\3\2\2\2\u01c9\u01c4\3\2\2\2\u01ca\u01cd\3\2\2\2")
        buf.write("\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cf\3")
        buf.write("\2\2\2\u01cd\u01cb\3\2\2\2\u01ce\u01be\3\2\2\2\u01ce\u01bf")
        buf.write("\3\2\2\2\u01ce\u01cb\3\2\2\2\u01cf)\3\2\2\2\u01d0\u01d1")
        buf.write("\7>\2\2\u01d1\u01d4\5j\66\2\u01d2\u01d3\78\2\2\u01d3\u01d5")
        buf.write("\5j\66\2\u01d4\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5")
        buf.write("+\3\2\2\2\u01d6\u01d9\5j\66\2\u01d7\u01d9\5|?\2\u01d8")
        buf.write("\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9\u01e1\3\2\2\2")
        buf.write("\u01da\u01dd\7?\2\2\u01db\u01de\5j\66\2\u01dc\u01de\5")
        buf.write("|?\2\u01dd\u01db\3\2\2\2\u01dd\u01dc\3\2\2\2\u01de\u01e0")
        buf.write("\3\2\2\2\u01df\u01da\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1")
        buf.write("\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e5\3\2\2\2")
        buf.write("\u01e3\u01e1\3\2\2\2\u01e4\u01e6\7?\2\2\u01e5\u01e4\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6-\3\2\2\2\u01e7\u01e8")
        buf.write("\t\2\2\2\u01e8/\3\2\2\2\u01e9\u01ea\7\17\2\2\u01ea\u01eb")
        buf.write("\5\u00aaV\2\u01eb\61\3\2\2\2\u01ec\u01ed\7!\2\2\u01ed")
        buf.write("\63\3\2\2\2\u01ee\u01f4\5\66\34\2\u01ef\u01f4\58\35\2")
        buf.write("\u01f0\u01f4\5:\36\2\u01f1\u01f4\5> \2\u01f2\u01f4\5<")
        buf.write("\37\2\u01f3\u01ee\3\2\2\2\u01f3\u01ef\3\2\2\2\u01f3\u01f0")
        buf.write("\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f2\3\2\2\2\u01f4")
        buf.write("\65\3\2\2\2\u01f5\u01f6\7\13\2\2\u01f6\67\3\2\2\2\u01f7")
        buf.write("\u01f8\7\r\2\2\u01f89\3\2\2\2\u01f9\u01fb\7#\2\2\u01fa")
        buf.write("\u01fc\5\u00acW\2\u01fb\u01fa\3\2\2\2\u01fb\u01fc\3\2")
        buf.write("\2\2\u01fc;\3\2\2\2\u01fd\u01fe\5\u00be`\2\u01fe=\3\2")
        buf.write("\2\2\u01ff\u0205\7\"\2\2\u0200\u0203\5j\66\2\u0201\u0202")
        buf.write("\7\26\2\2\u0202\u0204\5j\66\2\u0203\u0201\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u0206\3\2\2\2\u0205\u0200\3\2\2\2")
        buf.write("\u0205\u0206\3\2\2\2\u0206?\3\2\2\2\u0207\u020a\5B\"\2")
        buf.write("\u0208\u020a\5D#\2\u0209\u0207\3\2\2\2\u0209\u0208\3\2")
        buf.write("\2\2\u020aA\3\2\2\2\u020b\u020c\7\31\2\2\u020c\u020d\5")
        buf.write("L\'\2\u020dC\3\2\2\2\u020e\u021b\7\26\2\2\u020f\u0211")
        buf.write("\t\3\2\2\u0210\u020f\3\2\2\2\u0211\u0214\3\2\2\2\u0212")
        buf.write("\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\3\2\2\2")
        buf.write("\u0214\u0212\3\2\2\2\u0215\u021c\5N(\2\u0216\u0218\t\3")
        buf.write("\2\2\u0217\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u0217")
        buf.write("\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2\u021b")
        buf.write("\u0212\3\2\2\2\u021b\u0217\3\2\2\2\u021c\u021d\3\2\2\2")
        buf.write("\u021d\u0224\7\31\2\2\u021e\u0225\7^\2\2\u021f\u0220\7")
        buf.write("V\2\2\u0220\u0221\5J&\2\u0221\u0222\7=\2\2\u0222\u0225")
        buf.write("\3\2\2\2\u0223\u0225\5J&\2\u0224\u021e\3\2\2\2\u0224\u021f")
        buf.write("\3\2\2\2\u0224\u0223\3\2\2\2\u0225E\3\2\2\2\u0226\u0229")
        buf.write("\7*\2\2\u0227\u0228\7\7\2\2\u0228\u022a\7*\2\2\u0229\u0227")
        buf.write("\3\2\2\2\u0229\u022a\3\2\2\2\u022aG\3\2\2\2\u022b\u022e")
        buf.write("\5N(\2\u022c\u022d\7\7\2\2\u022d\u022f\7*\2\2\u022e\u022c")
        buf.write("\3\2\2\2\u022e\u022f\3\2\2\2\u022fI\3\2\2\2\u0230\u0235")
        buf.write("\5F$\2\u0231\u0232\7?\2\2\u0232\u0234\5F$\2\u0233\u0231")
        buf.write("\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0239\3\2\2\2\u0237\u0235\3\2\2\2")
        buf.write("\u0238\u023a\7?\2\2\u0239\u0238\3\2\2\2\u0239\u023a\3")
        buf.write("\2\2\2\u023aK\3\2\2\2\u023b\u0240\5H%\2\u023c\u023d\7")
        buf.write("?\2\2\u023d\u023f\5H%\2\u023e\u023c\3\2\2\2\u023f\u0242")
        buf.write("\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("M\3\2\2\2\u0242\u0240\3\2\2\2\u0243\u0248\7*\2\2\u0244")
        buf.write("\u0245\7B\2\2\u0245\u0247\7*\2\2\u0246\u0244\3\2\2\2\u0247")
        buf.write("\u024a\3\2\2\2\u0248\u0246\3\2\2\2\u0248\u0249\3\2\2\2")
        buf.write("\u0249O\3\2\2\2\u024a\u0248\3\2\2\2\u024b\u024c\7\27\2")
        buf.write("\2\u024c\u0251\7*\2\2\u024d\u024e\7?\2\2\u024e\u0250\7")
        buf.write("*\2\2\u024f\u024d\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252Q\3\2\2\2\u0253\u0251")
        buf.write("\3\2\2\2\u0254\u0255\7\36\2\2\u0255\u025a\7*\2\2\u0256")
        buf.write("\u0257\7?\2\2\u0257\u0259\7*\2\2\u0258\u0256\3\2\2\2\u0259")
        buf.write("\u025c\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2")
        buf.write("\u025bS\3\2\2\2\u025c\u025a\3\2\2\2\u025d\u025e\7\b\2")
        buf.write("\2\u025e\u0261\5j\66\2\u025f\u0260\7?\2\2\u0260\u0262")
        buf.write("\5j\66\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2\u0262")
        buf.write("U\3\2\2\2\u0263\u026d\5Z.\2\u0264\u026d\5\\/\2\u0265\u026d")
        buf.write("\5^\60\2\u0266\u026d\5`\61\2\u0267\u026d\5b\62\2\u0268")
        buf.write("\u026d\5\20\t\2\u0269\u026d\5\u00b0Y\2\u026a\u026d\5\f")
        buf.write("\7\2\u026b\u026d\5X-\2\u026c\u0263\3\2\2\2\u026c\u0264")
        buf.write("\3\2\2\2\u026c\u0265\3\2\2\2\u026c\u0266\3\2\2\2\u026c")
        buf.write("\u0267\3\2\2\2\u026c\u0268\3\2\2\2\u026c\u0269\3\2\2\2")
        buf.write("\u026c\u026a\3\2\2\2\u026c\u026b\3\2\2\2\u026dW\3\2\2")
        buf.write("\2\u026e\u0272\7\t\2\2\u026f\u0273\5\20\t\2\u0270\u0273")
        buf.write("\5b\62\2\u0271\u0273\5^\60\2\u0272\u026f\3\2\2\2\u0272")
        buf.write("\u0270\3\2\2\2\u0272\u0271\3\2\2\2\u0273Y\3\2\2\2\u0274")
        buf.write("\u0275\7\30\2\2\u0275\u0276\5j\66\2\u0276\u0277\7>\2\2")
        buf.write("\u0277\u027f\5h\65\2\u0278\u0279\7\20\2\2\u0279\u027a")
        buf.write("\5j\66\2\u027a\u027b\7>\2\2\u027b\u027c\5h\65\2\u027c")
        buf.write("\u027e\3\2\2\2\u027d\u0278\3\2\2\2\u027e\u0281\3\2\2\2")
        buf.write("\u027f\u027d\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0285\3")
        buf.write("\2\2\2\u0281\u027f\3\2\2\2\u0282\u0283\7\21\2\2\u0283")
        buf.write("\u0284\7>\2\2\u0284\u0286\5h\65\2\u0285\u0282\3\2\2\2")
        buf.write("\u0285\u0286\3\2\2\2\u0286[\3\2\2\2\u0287\u0288\7&\2\2")
        buf.write("\u0288\u0289\5j\66\2\u0289\u028a\7>\2\2\u028a\u028e\5")
        buf.write("h\65\2\u028b\u028c\7\21\2\2\u028c\u028d\7>\2\2\u028d\u028f")
        buf.write("\5h\65\2\u028e\u028b\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("]\3\2\2\2\u0290\u0291\7\25\2\2\u0291\u0292\5\u00aaV\2")
        buf.write("\u0292\u0293\7\32\2\2\u0293\u0294\5\u00acW\2\u0294\u0295")
        buf.write("\7>\2\2\u0295\u0299\5h\65\2\u0296\u0297\7\21\2\2\u0297")
        buf.write("\u0298\7>\2\2\u0298\u029a\5h\65\2\u0299\u0296\3\2\2\2")
        buf.write("\u0299\u029a\3\2\2\2\u029a_\3\2\2\2\u029b\u029c\7%\2\2")
        buf.write("\u029c\u029d\7>\2\2\u029d\u02b3\5h\65\2\u029e\u029f\5")
        buf.write("f\64\2\u029f\u02a0\7>\2\2\u02a0\u02a1\5h\65\2\u02a1\u02a3")
        buf.write("\3\2\2\2\u02a2\u029e\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a9\3\2\2\2")
        buf.write("\u02a6\u02a7\7\21\2\2\u02a7\u02a8\7>\2\2\u02a8\u02aa\5")
        buf.write("h\65\2\u02a9\u02a6\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ae")
        buf.write("\3\2\2\2\u02ab\u02ac\7\24\2\2\u02ac\u02ad\7>\2\2\u02ad")
        buf.write("\u02af\5h\65\2\u02ae\u02ab\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02af\u02b4\3\2\2\2\u02b0\u02b1\7\24\2\2\u02b1\u02b2")
        buf.write("\7>\2\2\u02b2\u02b4\5h\65\2\u02b3\u02a2\3\2\2\2\u02b3")
        buf.write("\u02b0\3\2\2\2\u02b4a\3\2\2\2\u02b5\u02b6\7\'\2\2\u02b6")
        buf.write("\u02bb\5d\63\2\u02b7\u02b8\7?\2\2\u02b8\u02ba\5d\63\2")
        buf.write("\u02b9\u02b7\3\2\2\2\u02ba\u02bd\3\2\2\2\u02bb\u02b9\3")
        buf.write("\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2\u02bd\u02bb")
        buf.write("\3\2\2\2\u02be\u02bf\7>\2\2\u02bf\u02c0\5h\65\2\u02c0")
        buf.write("c\3\2\2\2\u02c1\u02c4\5j\66\2\u02c2\u02c3\7\7\2\2\u02c3")
        buf.write("\u02c5\5~@\2\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5")
        buf.write("e\3\2\2\2\u02c6\u02cc\7\22\2\2\u02c7\u02ca\5j\66\2\u02c8")
        buf.write("\u02c9\7\7\2\2\u02c9\u02cb\7*\2\2\u02ca\u02c8\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02c7\3")
        buf.write("\2\2\2\u02cc\u02cd\3\2\2\2\u02cdg\3\2\2\2\u02ce\u02d9")
        buf.write("\5\"\22\2\u02cf\u02d0\7)\2\2\u02d0\u02d2\7d\2\2\u02d1")
        buf.write("\u02d3\5 \21\2\u02d2\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3")
        buf.write("\2\2\2\u02d6\u02d7\7e\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02ce")
        buf.write("\3\2\2\2\u02d8\u02cf\3\2\2\2\u02d9i\3\2\2\2\u02da\u02e0")
        buf.write("\5r:\2\u02db\u02dc\7\30\2\2\u02dc\u02dd\5r:\2\u02dd\u02de")
        buf.write("\7\21\2\2\u02de\u02df\5j\66\2\u02df\u02e1\3\2\2\2\u02e0")
        buf.write("\u02db\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e4\3\2\2\2")
        buf.write("\u02e2\u02e4\5n8\2\u02e3\u02da\3\2\2\2\u02e3\u02e2\3\2")
        buf.write("\2\2\u02e4k\3\2\2\2\u02e5\u02e8\5r:\2\u02e6\u02e8\5p9")
        buf.write("\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8m\3\2")
        buf.write("\2\2\u02e9\u02eb\7\34\2\2\u02ea\u02ec\5\34\17\2\u02eb")
        buf.write("\u02ea\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2")
        buf.write("\u02ed\u02ee\7>\2\2\u02ee\u02ef\5j\66\2\u02efo\3\2\2\2")
        buf.write("\u02f0\u02f2\7\34\2\2\u02f1\u02f3\5\34\17\2\u02f2\u02f1")
        buf.write("\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write("\u02f5\7>\2\2\u02f5\u02f6\5l\67\2\u02f6q\3\2\2\2\u02f7")
        buf.write("\u02fc\5t;\2\u02f8\u02f9\7 \2\2\u02f9\u02fb\5t;\2\u02fa")
        buf.write("\u02f8\3\2\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2")
        buf.write("\u02fc\u02fd\3\2\2\2\u02fds\3\2\2\2\u02fe\u02fc\3\2\2")
        buf.write("\2\u02ff\u0304\5v<\2\u0300\u0301\7\6\2\2\u0301\u0303\5")
        buf.write("v<\2\u0302\u0300\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305u\3\2\2\2\u0306\u0304")
        buf.write("\3\2\2\2\u0307\u0308\7\37\2\2\u0308\u030b\5v<\2\u0309")
        buf.write("\u030b\5x=\2\u030a\u0307\3\2\2\2\u030a\u0309\3\2\2\2\u030b")
        buf.write("w\3\2\2\2\u030c\u0312\5~@\2\u030d\u030e\5z>\2\u030e\u030f")
        buf.write("\5~@\2\u030f\u0311\3\2\2\2\u0310\u030d\3\2\2\2\u0311\u0314")
        buf.write("\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("y\3\2\2\2\u0314\u0312\3\2\2\2\u0315\u0323\7K\2\2\u0316")
        buf.write("\u0323\7E\2\2\u0317\u0323\7D\2\2\u0318\u0323\7F\2\2\u0319")
        buf.write("\u0323\7L\2\2\u031a\u0323\7Q\2\2\u031b\u0323\7R\2\2\u031c")
        buf.write("\u0323\7\32\2\2\u031d\u031e\7\37\2\2\u031e\u0323\7\32")
        buf.write("\2\2\u031f\u0323\7\33\2\2\u0320\u0321\7\33\2\2\u0321\u0323")
        buf.write("\7\37\2\2\u0322\u0315\3\2\2\2\u0322\u0316\3\2\2\2\u0322")
        buf.write("\u0317\3\2\2\2\u0322\u0318\3\2\2\2\u0322\u0319\3\2\2\2")
        buf.write("\u0322\u031a\3\2\2\2\u0322\u031b\3\2\2\2\u0322\u031c\3")
        buf.write("\2\2\2\u0322\u031d\3\2\2\2\u0322\u031f\3\2\2\2\u0322\u0320")
        buf.write("\3\2\2\2\u0323{\3\2\2\2\u0324\u0325\7^\2\2\u0325\u0326")
        buf.write("\5~@\2\u0326}\3\2\2\2\u0327\u032b\5\u0082B\2\u0328\u032a")
        buf.write("\5\u0080A\2\u0329\u0328\3\2\2\2\u032a\u032d\3\2\2\2\u032b")
        buf.write("\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c\177\3\2\2\2\u032d")
        buf.write("\u032b\3\2\2\2\u032e\u032f\7X\2\2\u032f\u0330\5\u0082")
        buf.write("B\2\u0330\u0081\3\2\2\2\u0331\u0335\5\u0086D\2\u0332\u0334")
        buf.write("\5\u0084C\2\u0333\u0332\3\2\2\2\u0334\u0337\3\2\2\2\u0335")
        buf.write("\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0083\3\2\2\2")
        buf.write("\u0337\u0335\3\2\2\2\u0338\u0339\7`\2\2\u0339\u033a\5")
        buf.write("\u0086D\2\u033a\u0085\3\2\2\2\u033b\u033f\5\u008aF\2\u033c")
        buf.write("\u033e\5\u0088E\2\u033d\u033c\3\2\2\2\u033e\u0341\3\2")
        buf.write("\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0087")
        buf.write("\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0343\7\66\2\2\u0343")
        buf.write("\u0344\5\u008aF\2\u0344\u0089\3\2\2\2\u0345\u0349\5\u008e")
        buf.write("H\2\u0346\u0348\5\u008cG\2\u0347\u0346\3\2\2\2\u0348\u034b")
        buf.write("\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a")
        buf.write("\u008b\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u034d\t\4\2\2")
        buf.write("\u034d\u034e\5\u008eH\2\u034e\u008d\3\2\2\2\u034f\u0353")
        buf.write("\5\u0092J\2\u0350\u0352\5\u0090I\2\u0351\u0350\3\2\2\2")
        buf.write("\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3")
        buf.write("\2\2\2\u0354\u008f\3\2\2\2\u0355\u0353\3\2\2\2\u0356\u0357")
        buf.write("\t\5\2\2\u0357\u0358\5\u0092J\2\u0358\u0091\3\2\2\2\u0359")
        buf.write("\u035d\5\u0096L\2\u035a\u035c\5\u0094K\2\u035b\u035a\3")
        buf.write("\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u0093\3\2\2\2\u035f\u035d\3\2\2\2\u0360")
        buf.write("\u0361\t\6\2\2\u0361\u0362\5\u0096L\2\u0362\u0095\3\2")
        buf.write("\2\2\u0363\u0364\t\7\2\2\u0364\u0367\5\u0096L\2\u0365")
        buf.write("\u0367\5\u0098M\2\u0366\u0363\3\2\2\2\u0366\u0365\3\2")
        buf.write("\2\2\u0367\u0097\3\2\2\2\u0368\u036b\5\u009aN\2\u0369")
        buf.write("\u036a\7Y\2\2\u036a\u036c\5\u0096L\2\u036b\u0369\3\2\2")
        buf.write("\2\u036b\u036c\3\2\2\2\u036c\u0099\3\2\2\2\u036d\u036f")
        buf.write("\7\n\2\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0370\3\2\2\2\u0370\u0374\5\u009cO\2\u0371\u0373\5\u00a2")
        buf.write("R\2\u0372\u0371\3\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u009b\3\2\2\2\u0376")
        buf.write("\u0374\3\2\2\2\u0377\u037a\7V\2\2\u0378\u037b\5\u00be")
        buf.write("`\2\u0379\u037b\5\u00a0Q\2\u037a\u0378\3\2\2\2\u037a\u0379")
        buf.write("\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u0389\7=\2\2\u037d\u037f\7U\2\2\u037e\u0380\5\u00a0Q")
        buf.write("\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0389\7<\2\2\u0382\u0384\7T\2\2\u0383\u0385")
        buf.write("\5\u00aeX\2\u0384\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\u0389\7;\2\2\u0387\u0389\5\u009e")
        buf.write("P\2\u0388\u0377\3\2\2\2\u0388\u037d\3\2\2\2\u0388\u0382")
        buf.write("\3\2\2\2\u0388\u0387\3\2\2\2\u0389\u009d\3\2\2\2\u038a")
        buf.write("\u0396\7*\2\2\u038b\u0396\7\4\2\2\u038c\u038e\7\3\2\2")
        buf.write("\u038d\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u038d\3")
        buf.write("\2\2\2\u038f\u0390\3\2\2\2\u0390\u0396\3\2\2\2\u0391\u0396")
        buf.write("\7C\2\2\u0392\u0396\7\35\2\2\u0393\u0396\7$\2\2\u0394")
        buf.write("\u0396\7\23\2\2\u0395\u038a\3\2\2\2\u0395\u038b\3\2\2")
        buf.write("\2\u0395\u038d\3\2\2\2\u0395\u0391\3\2\2\2\u0395\u0392")
        buf.write("\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0394\3\2\2\2\u0396")
        buf.write("\u009f\3\2\2\2\u0397\u039a\5j\66\2\u0398\u039a\5|?\2\u0399")
        buf.write("\u0397\3\2\2\2\u0399\u0398\3\2\2\2\u039a\u03a9\3\2\2\2")
        buf.write("\u039b\u03aa\5\u00b8]\2\u039c\u039f\7?\2\2\u039d\u03a0")
        buf.write("\5j\66\2\u039e\u03a0\5|?\2\u039f\u039d\3\2\2\2\u039f\u039e")
        buf.write("\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u039c\3\2\2\2\u03a2")
        buf.write("\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2")
        buf.write("\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a8\7")
        buf.write("?\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03aa")
        buf.write("\3\2\2\2\u03a9\u039b\3\2\2\2\u03a9\u03a3\3\2\2\2\u03aa")
        buf.write("\u00a1\3\2\2\2\u03ab\u03ad\7V\2\2\u03ac\u03ae\5\u00b2")
        buf.write("Z\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af")
        buf.write("\3\2\2\2\u03af\u03b7\7=\2\2\u03b0\u03b1\7U\2\2\u03b1\u03b2")
        buf.write("\5\u00a4S\2\u03b2\u03b3\7<\2\2\u03b3\u03b7\3\2\2\2\u03b4")
        buf.write("\u03b5\7B\2\2\u03b5\u03b7\7*\2\2\u03b6\u03ab\3\2\2\2\u03b6")
        buf.write("\u03b0\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7\u00a3\3\2\2\2")
        buf.write("\u03b8\u03bd\5\u00a6T\2\u03b9\u03ba\7?\2\2\u03ba\u03bc")
        buf.write("\5\u00a6T\2\u03bb\u03b9\3\2\2\2\u03bc\u03bf\3\2\2\2\u03bd")
        buf.write("\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c1\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03c0\u03c2\7?\2\2\u03c1\u03c0\3")
        buf.write("\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u00a5\3\2\2\2\u03c3\u03cf")
        buf.write("\5j\66\2\u03c4\u03c6\5j\66\2\u03c5\u03c4\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9\7>\2\2")
        buf.write("\u03c8\u03ca\5j\66\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3")
        buf.write("\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03cd\5\u00a8U\2\u03cc")
        buf.write("\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cf\3\2\2\2")
        buf.write("\u03ce\u03c3\3\2\2\2\u03ce\u03c5\3\2\2\2\u03cf\u00a7\3")
        buf.write("\2\2\2\u03d0\u03d2\7>\2\2\u03d1\u03d3\5j\66\2\u03d2\u03d1")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u00a9\3\2\2\2\u03d4")
        buf.write("\u03d7\5~@\2\u03d5\u03d7\5|?\2\u03d6\u03d4\3\2\2\2\u03d6")
        buf.write("\u03d5\3\2\2\2\u03d7\u03df\3\2\2\2\u03d8\u03db\7?\2\2")
        buf.write("\u03d9\u03dc\5~@\2\u03da\u03dc\5|?\2\u03db\u03d9\3\2\2")
        buf.write("\2\u03db\u03da\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03d8")
        buf.write("\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df")
        buf.write("\u03e0\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1\u03df\3\2\2\2")
        buf.write("\u03e2\u03e4\7?\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3")
        buf.write("\2\2\2\u03e4\u00ab\3\2\2\2\u03e5\u03ea\5j\66\2\u03e6\u03e7")
        buf.write("\7?\2\2\u03e7\u03e9\5j\66\2\u03e8\u03e6\3\2\2\2\u03e9")
        buf.write("\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2")
        buf.write("\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed\u03ef\7")
        buf.write("?\2\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u00ad")
        buf.write("\3\2\2\2\u03f0\u03f1\5j\66\2\u03f1\u03f2\7>\2\2\u03f2")
        buf.write("\u03f3\5j\66\2\u03f3\u03f7\3\2\2\2\u03f4\u03f5\7Y\2\2")
        buf.write("\u03f5\u03f7\5~@\2\u03f6\u03f0\3\2\2\2\u03f6\u03f4\3\2")
        buf.write("\2\2\u03f7\u040a\3\2\2\2\u03f8\u040b\5\u00b8]\2\u03f9")
        buf.write("\u0400\7?\2\2\u03fa\u03fb\5j\66\2\u03fb\u03fc\7>\2\2\u03fc")
        buf.write("\u03fd\5j\66\2\u03fd\u0401\3\2\2\2\u03fe\u03ff\7Y\2\2")
        buf.write("\u03ff\u0401\5~@\2\u0400\u03fa\3\2\2\2\u0400\u03fe\3\2")
        buf.write("\2\2\u0401\u0403\3\2\2\2\u0402\u03f9\3\2\2\2\u0403\u0406")
        buf.write("\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write("\u0408\3\2\2\2\u0406\u0404\3\2\2\2\u0407\u0409\7?\2\2")
        buf.write("\u0408\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040b\3")
        buf.write("\2\2\2\u040a\u03f8\3\2\2\2\u040a\u0404\3\2\2\2\u040b\u0421")
        buf.write("\3\2\2\2\u040c\u040f\5j\66\2\u040d\u040f\5|?\2\u040e\u040c")
        buf.write("\3\2\2\2\u040e\u040d\3\2\2\2\u040f\u041e\3\2\2\2\u0410")
        buf.write("\u041f\5\u00b8]\2\u0411\u0414\7?\2\2\u0412\u0415\5j\66")
        buf.write("\2\u0413\u0415\5|?\2\u0414\u0412\3\2\2\2\u0414\u0413\3")
        buf.write("\2\2\2\u0415\u0417\3\2\2\2\u0416\u0411\3\2\2\2\u0417\u041a")
        buf.write("\3\2\2\2\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419")
        buf.write("\u041c\3\2\2\2\u041a\u0418\3\2\2\2\u041b\u041d\7?\2\2")
        buf.write("\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041f\3")
        buf.write("\2\2\2\u041e\u0410\3\2\2\2\u041e\u0418\3\2\2\2\u041f\u0421")
        buf.write("\3\2\2\2\u0420\u03f6\3\2\2\2\u0420\u040e\3\2\2\2\u0421")
        buf.write("\u00af\3\2\2\2\u0422\u0423\7\f\2\2\u0423\u0429\7*\2\2")
        buf.write("\u0424\u0426\7V\2\2\u0425\u0427\5\u00b2Z\2\u0426\u0425")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u042a\7=\2\2\u0429\u0424\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write("\u042a\u042b\3\2\2\2\u042b\u042c\7>\2\2\u042c\u042d\5")
        buf.write("h\65\2\u042d\u00b1\3\2\2\2\u042e\u0433\5\u00b4[\2\u042f")
        buf.write("\u0430\7?\2\2\u0430\u0432\5\u00b4[\2\u0431\u042f\3\2\2")
        buf.write("\2\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434\u0437\3\2\2\2\u0435\u0433\3\2\2\2\u0436")
        buf.write("\u0438\7?\2\2\u0437\u0436\3\2\2\2\u0437\u0438\3\2\2\2")
        buf.write("\u0438\u00b3\3\2\2\2\u0439\u0446\5j\66\2\u043a\u043b\5")
        buf.write("j\66\2\u043b\u043c\5\u00b8]\2\u043c\u0446\3\2\2\2\u043d")
        buf.write("\u043e\5j\66\2\u043e\u043f\78\2\2\u043f\u0440\5j\66\2")
        buf.write("\u0440\u0446\3\2\2\2\u0441\u0442\7Y\2\2\u0442\u0446\5")
        buf.write("j\66\2\u0443\u0444\7^\2\2\u0444\u0446\5j\66\2\u0445\u0439")
        buf.write("\3\2\2\2\u0445\u043a\3\2\2\2\u0445\u043d\3\2\2\2\u0445")
        buf.write("\u0441\3\2\2\2\u0445\u0443\3\2\2\2\u0446\u00b5\3\2\2\2")
        buf.write("\u0447\u044a\5\u00b8]\2\u0448\u044a\5\u00ba^\2\u0449\u0447")
        buf.write("\3\2\2\2\u0449\u0448\3\2\2\2\u044a\u00b7\3\2\2\2\u044b")
        buf.write("\u044d\7\t\2\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2")
        buf.write("\u044d\u044e\3\2\2\2\u044e\u044f\7\25\2\2\u044f\u0450")
        buf.write("\5\u00aaV\2\u0450\u0451\7\32\2\2\u0451\u0453\5r:\2\u0452")
        buf.write("\u0454\5\u00b6\\\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2")
        buf.write("\2\2\u0454\u00b9\3\2\2\2\u0455\u0456\7\30\2\2\u0456\u0458")
        buf.write("\5l\67\2\u0457\u0459\5\u00b6\\\2\u0458\u0457\3\2\2\2\u0458")
        buf.write("\u0459\3\2\2\2\u0459\u00bb\3\2\2\2\u045a\u045b\7*\2\2")
        buf.write("\u045b\u00bd\3\2\2\2\u045c\u045e\7(\2\2\u045d\u045f\5")
        buf.write("\u00c0a\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f")
        buf.write("\u00bf\3\2\2\2\u0460\u0461\7\26\2\2\u0461\u0464\5j\66")
        buf.write("\2\u0462\u0464\5\u00acW\2\u0463\u0460\3\2\2\2\u0463\u0462")
        buf.write("\3\2\2\2\u0464\u00c1\3\2\2\2\u00a6\u00c7\u00cb\u00cd\u00d6")
        buf.write("\u00df\u00e2\u00e9\u00ef\u00f9\u0100\u0106\u010b\u010e")
        buf.write("\u0114\u0116\u0118\u011d\u011f\u0121\u0125\u0128\u012e")
        buf.write("\u0130\u0132\u0137\u0139\u013f\u0144\u0149\u014e\u0154")
        buf.write("\u0158\u015e\u0164\u0168\u016f\u0171\u0173\u0178\u017a")
        buf.write("\u017c\u0180\u0186\u018a\u0191\u0193\u0195\u019a\u019c")
        buf.write("\u01a2\u01a9\u01ad\u01b9\u01c2\u01c7\u01cb\u01ce\u01d4")
        buf.write("\u01d8\u01dd\u01e1\u01e5\u01f3\u01fb\u0203\u0205\u0209")
        buf.write("\u0212\u0219\u021b\u0224\u0229\u022e\u0235\u0239\u0240")
        buf.write("\u0248\u0251\u025a\u0261\u026c\u0272\u027f\u0285\u028e")
        buf.write("\u0299\u02a4\u02a9\u02ae\u02b3\u02bb\u02c4\u02ca\u02cc")
        buf.write("\u02d4\u02d8\u02e0\u02e3\u02e7\u02eb\u02f2\u02fc\u0304")
        buf.write("\u030a\u0312\u0322\u032b\u0335\u033f\u0349\u0353\u035d")
        buf.write("\u0366\u036b\u036e\u0374\u037a\u037f\u0384\u0388\u038f")
        buf.write("\u0395\u0399\u039f\u03a3\u03a7\u03a9\u03ad\u03b6\u03bd")
        buf.write("\u03c1\u03c5\u03c9\u03cc\u03ce\u03d2\u03d6\u03db\u03df")
        buf.write("\u03e3\u03ea\u03ee\u03f6\u0400\u0404\u0408\u040a\u040e")
        buf.write("\u0414\u0418\u041c\u041e\u0420\u0426\u0429\u0433\u0437")
        buf.write("\u0445\u0449\u044c\u0453\u0458\u045e\u0463")
        return buf.getvalue()


class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'and'", "'as'", "'assert'", "'async'", "'await'", 
                     "'break'", "'class'", "'continue'", "'def'", "'del'", 
                     "'elif'", "'else'", "'except'", "'False'", "'finally'", 
                     "'for'", "'from'", "'global'", "'if'", "'import'", 
                     "'in'", "'is'", "'lambda'", "'None'", "'nonlocal'", 
                     "'not'", "'or'", "'pass'", "'raise'", "'return'", "'True'", 
                     "'try'", "'while'", "'with'", "'yield'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'+='", "'&='", "'&'", "'->'", 
                     "'='", "'@'", "'@='", "'}'", "']'", "')'", "':'", "','", 
                     "'/'", "'/='", "'.'", "'...'", "'=='", "'>'", "'>='", 
                     "'//'", "'//='", "'<<'", "'<<='", "'<'", "'<='", "'-'", 
                     "'%'", "'%='", "'*='", "'<>'", "'!='", "'~'", "'{'", 
                     "'['", "'('", "'|='", "'|'", "'**'", "'**='", "'>>'", 
                     "'>>='", "';'", "'*'", "'-='", "'^'", "'^='" ]

    symbolicNames = [ "<INVALID>", "STRING", "NUMBER", "INTEGER", "AND", 
                      "AS", "ASSERT", "ASYNC", "AWAIT", "BREAK", "CLASS", 
                      "CONTINUE", "DEF", "DEL", "ELIF", "ELSE", "EXCEPT", 
                      "FALSE", "FINALLY", "FOR", "FROM", "GLOBAL", "IF", 
                      "IMPORT", "IN", "IS", "LAMBDA", "NONE", "NONLOCAL", 
                      "NOT", "OR", "PASS", "RAISE", "RETURN", "TRUE", "TRY", 
                      "WHILE", "WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "ADD", "ADD_ASSIGN", "AND_ASSIGN", "AND_OP", "ARROW", 
                      "ASSIGN", "AT", "AT_ASSIGN", "CLOSE_BRACE", "CLOSE_BRACK", 
                      "CLOSE_PAREN", "COLON", "COMMA", "DIV", "DIV_ASSIGN", 
                      "DOT", "ELLIPSIS", "EQUALS", "GREATER_THAN", "GT_EQ", 
                      "IDIV", "IDIV_ASSIGN", "LEFT_SHIFT", "LEFT_SHIFT_ASSIGN", 
                      "LESS_THAN", "LT_EQ", "MINUS", "MOD", "MOD_ASSIGN", 
                      "MULT_ASSIGN", "NOT_EQ_1", "NOT_EQ_2", "NOT_OP", "OPEN_BRACE", 
                      "OPEN_BRACK", "OPEN_PAREN", "OR_ASSIGN", "OR_OP", 
                      "POWER", "POWER_ASSIGN", "RIGHT_SHIFT", "RIGHT_SHIFT_ASSIGN", 
                      "SEMI_COLON", "STAR", "SUB_ASSIGN", "XOR", "XOR_ASSIGN", 
                      "SKIP_", "UNKNOWN_CHAR", "INDENT", "DEDENT" ]

    RULE_singleInput = 0
    RULE_fileInput = 1
    RULE_evalInput = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_asyncFuncDef = 6
    RULE_funcDef = 7
    RULE_parameters = 8
    RULE_typedArgsList = 9
    RULE_tpDefTestList = 10
    RULE_tpDefTest = 11
    RULE_tpDef = 12
    RULE_varargsList = 13
    RULE_vfpDef = 14
    RULE_stmt = 15
    RULE_simpleStmt = 16
    RULE_smallStmt = 17
    RULE_exprStmt = 18
    RULE_exprStmtCont = 19
    RULE_annAssign = 20
    RULE_testListStarExpr = 21
    RULE_augAssign = 22
    RULE_delStmt = 23
    RULE_passStmt = 24
    RULE_flowStmt = 25
    RULE_breakStmt = 26
    RULE_continueStmt = 27
    RULE_returnStmt = 28
    RULE_yieldStmt = 29
    RULE_raiseStmt = 30
    RULE_importStmt = 31
    RULE_importName = 32
    RULE_importFrom = 33
    RULE_importAsName = 34
    RULE_dottedAsName = 35
    RULE_importAsNames = 36
    RULE_dottedAsNames = 37
    RULE_dottedName = 38
    RULE_globalStmt = 39
    RULE_nonlocalStmt = 40
    RULE_assertStmt = 41
    RULE_compoundStmt = 42
    RULE_asyncStmt = 43
    RULE_ifStmt = 44
    RULE_whileStmt = 45
    RULE_forStmt = 46
    RULE_tryStmt = 47
    RULE_withStmt = 48
    RULE_withItem = 49
    RULE_exceptClause = 50
    RULE_suite = 51
    RULE_test = 52
    RULE_testNoCond = 53
    RULE_lambaDef = 54
    RULE_lambaDefNoCond = 55
    RULE_orTest = 56
    RULE_andTest = 57
    RULE_notTest = 58
    RULE_comparison = 59
    RULE_compOp = 60
    RULE_starExpr = 61
    RULE_expr = 62
    RULE_exprCont = 63
    RULE_xorExpr = 64
    RULE_xorExprCont = 65
    RULE_andExpr = 66
    RULE_andExprCont = 67
    RULE_shiftExpr = 68
    RULE_shiftExprCont = 69
    RULE_arithExpr = 70
    RULE_arithExprCont = 71
    RULE_term = 72
    RULE_termCont = 73
    RULE_factor = 74
    RULE_power = 75
    RULE_atomExpr = 76
    RULE_atom = 77
    RULE_const = 78
    RULE_testListComp = 79
    RULE_trailer = 80
    RULE_subscriptList = 81
    RULE_subscript = 82
    RULE_sliceOp = 83
    RULE_exprList = 84
    RULE_testList = 85
    RULE_dictOrSetMaker = 86
    RULE_classDef = 87
    RULE_argList = 88
    RULE_arg = 89
    RULE_compIter = 90
    RULE_compFor = 91
    RULE_compIf = 92
    RULE_encodingDecl = 93
    RULE_yieldExpr = 94
    RULE_yieldArg = 95

    ruleNames =  [ "singleInput", "fileInput", "evalInput", "decorator", 
                   "decorators", "decorated", "asyncFuncDef", "funcDef", 
                   "parameters", "typedArgsList", "tpDefTestList", "tpDefTest", 
                   "tpDef", "varargsList", "vfpDef", "stmt", "simpleStmt", 
                   "smallStmt", "exprStmt", "exprStmtCont", "annAssign", 
                   "testListStarExpr", "augAssign", "delStmt", "passStmt", 
                   "flowStmt", "breakStmt", "continueStmt", "returnStmt", 
                   "yieldStmt", "raiseStmt", "importStmt", "importName", 
                   "importFrom", "importAsName", "dottedAsName", "importAsNames", 
                   "dottedAsNames", "dottedName", "globalStmt", "nonlocalStmt", 
                   "assertStmt", "compoundStmt", "asyncStmt", "ifStmt", 
                   "whileStmt", "forStmt", "tryStmt", "withStmt", "withItem", 
                   "exceptClause", "suite", "test", "testNoCond", "lambaDef", 
                   "lambaDefNoCond", "orTest", "andTest", "notTest", "comparison", 
                   "compOp", "starExpr", "expr", "exprCont", "xorExpr", 
                   "xorExprCont", "andExpr", "andExprCont", "shiftExpr", 
                   "shiftExprCont", "arithExpr", "arithExprCont", "term", 
                   "termCont", "factor", "power", "atomExpr", "atom", "const", 
                   "testListComp", "trailer", "subscriptList", "subscript", 
                   "sliceOp", "exprList", "testList", "dictOrSetMaker", 
                   "classDef", "argList", "arg", "compIter", "compFor", 
                   "compIf", "encodingDecl", "yieldExpr", "yieldArg" ]

    EOF = Token.EOF
    STRING=1
    NUMBER=2
    INTEGER=3
    AND=4
    AS=5
    ASSERT=6
    ASYNC=7
    AWAIT=8
    BREAK=9
    CLASS=10
    CONTINUE=11
    DEF=12
    DEL=13
    ELIF=14
    ELSE=15
    EXCEPT=16
    FALSE=17
    FINALLY=18
    FOR=19
    FROM=20
    GLOBAL=21
    IF=22
    IMPORT=23
    IN=24
    IS=25
    LAMBDA=26
    NONE=27
    NONLOCAL=28
    NOT=29
    OR=30
    PASS=31
    RAISE=32
    RETURN=33
    TRUE=34
    TRY=35
    WHILE=36
    WITH=37
    YIELD=38
    NEWLINE=39
    NAME=40
    STRING_LITERAL=41
    BYTES_LITERAL=42
    DECIMAL_INTEGER=43
    OCT_INTEGER=44
    HEX_INTEGER=45
    BIN_INTEGER=46
    FLOAT_NUMBER=47
    IMAG_NUMBER=48
    ADD=49
    ADD_ASSIGN=50
    AND_ASSIGN=51
    AND_OP=52
    ARROW=53
    ASSIGN=54
    AT=55
    AT_ASSIGN=56
    CLOSE_BRACE=57
    CLOSE_BRACK=58
    CLOSE_PAREN=59
    COLON=60
    COMMA=61
    DIV=62
    DIV_ASSIGN=63
    DOT=64
    ELLIPSIS=65
    EQUALS=66
    GREATER_THAN=67
    GT_EQ=68
    IDIV=69
    IDIV_ASSIGN=70
    LEFT_SHIFT=71
    LEFT_SHIFT_ASSIGN=72
    LESS_THAN=73
    LT_EQ=74
    MINUS=75
    MOD=76
    MOD_ASSIGN=77
    MULT_ASSIGN=78
    NOT_EQ_1=79
    NOT_EQ_2=80
    NOT_OP=81
    OPEN_BRACE=82
    OPEN_BRACK=83
    OPEN_PAREN=84
    OR_ASSIGN=85
    OR_OP=86
    POWER=87
    POWER_ASSIGN=88
    RIGHT_SHIFT=89
    RIGHT_SHIFT_ASSIGN=90
    SEMI_COLON=91
    STAR=92
    SUB_ASSIGN=93
    XOR=94
    XOR_ASSIGN=95
    SKIP_=96
    UNKNOWN_CHAR=97
    INDENT=98
    DEDENT=99

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleInputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simpleStmt(self):
            return self.getTypedRuleContext(Python3Parser.SimpleStmtContext,0)


        def compoundStmt(self):
            return self.getTypedRuleContext(Python3Parser.CompoundStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_singleInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInput" ):
                listener.enterSingleInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInput" ):
                listener.exitSingleInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInput" ):
                return visitor.visitSingleInput(self)
            else:
                return visitor.visitChildren(self)




    def singleInput(self):

        localctx = Python3Parser.SingleInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleInput)
        try:
            self.state = 197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.simpleStmt()
                pass
            elif token in [Python3Parser.ASYNC, Python3Parser.CLASS, Python3Parser.DEF, Python3Parser.FOR, Python3Parser.IF, Python3Parser.TRY, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.compoundStmt()
                self.state = 195
                self.match(Python3Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileInputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_fileInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileInput" ):
                listener.enterFileInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileInput" ):
                listener.exitFileInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileInput" ):
                return visitor.visitFileInput(self)
            else:
                return visitor.visitChildren(self)




    def fileInput(self):

        localctx = Python3Parser.FileInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fileInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD) | (1 << Python3Parser.AT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                self.state = 201
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 199
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CLASS, Python3Parser.CONTINUE, Python3Parser.DEF, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FOR, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IF, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.TRY, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.AT, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                    self.state = 200
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvalInputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testList(self):
            return self.getTypedRuleContext(Python3Parser.TestListContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_evalInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvalInput" ):
                listener.enterEvalInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvalInput" ):
                listener.exitEvalInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvalInput" ):
                return visitor.visitEvalInput(self)
            else:
                return visitor.visitChildren(self)




    def evalInput(self):

        localctx = Python3Parser.EvalInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_evalInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.testList()
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 209
                self.match(Python3Parser.NEWLINE)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dottedName(self):
            return self.getTypedRuleContext(Python3Parser.DottedNameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def argList(self):
            return self.getTypedRuleContext(Python3Parser.ArgListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(Python3Parser.AT)
            self.state = 218
            self.dottedName()
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 219
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.POWER - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                    self.state = 220
                    self.argList()


                self.state = 223
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 226
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 228
                self.decorator()
                self.state = 231 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classDef(self):
            return self.getTypedRuleContext(Python3Parser.ClassDefContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(Python3Parser.FuncDefContext,0)


        def asyncFuncDef(self):
            return self.getTypedRuleContext(Python3Parser.AsyncFuncDefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.decorators()
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 234
                self.classDef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 235
                self.funcDef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 236
                self.asyncFuncDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsyncFuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcDef(self):
            return self.getTypedRuleContext(Python3Parser.FuncDefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_asyncFuncDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsyncFuncDef" ):
                listener.enterAsyncFuncDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsyncFuncDef" ):
                listener.exitAsyncFuncDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsyncFuncDef" ):
                return visitor.visitAsyncFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def asyncFuncDef(self):

        localctx = Python3Parser.AsyncFuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_asyncFuncDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(Python3Parser.ASYNC)
            self.state = 240
            self.funcDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDef" ):
                listener.enterFuncDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDef" ):
                listener.exitFuncDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncDef" ):
                return visitor.visitFuncDef(self)
            else:
                return visitor.visitChildren(self)




    def funcDef(self):

        localctx = Python3Parser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(Python3Parser.DEF)
            self.state = 243
            self.match(Python3Parser.NAME)
            self.state = 244
            self.parameters()
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 245
                self.match(Python3Parser.ARROW)
                self.state = 246
                self.test()


            self.state = 249
            self.match(Python3Parser.COLON)
            self.state = 250
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedArgsList(self):
            return self.getTypedRuleContext(Python3Parser.TypedArgsListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (Python3Parser.NAME - 40)) | (1 << (Python3Parser.POWER - 40)) | (1 << (Python3Parser.STAR - 40)))) != 0):
                self.state = 253
                self.typedArgsList()


            self.state = 256
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedArgsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.a0 = None # TpDefTestContext
            self.l0 = None # TpDefTestListContext
            self.va = None # TpDefContext
            self.l1 = None # TpDefTestListContext
            self.vk = None # TpDefContext
            self.l2 = None # TpDefTestListContext

        def tpDefTest(self):
            return self.getTypedRuleContext(Python3Parser.TpDefTestContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def tpDefTestList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TpDefTestListContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TpDefTestListContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def tpDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TpDefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TpDefContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_typedArgsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedArgsList" ):
                listener.enterTypedArgsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedArgsList" ):
                listener.exitTypedArgsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedArgsList" ):
                return visitor.visitTypedArgsList(self)
            else:
                return visitor.visitChildren(self)




    def typedArgsList(self):

        localctx = Python3Parser.TypedArgsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedArgsList)
        self._la = 0 # Token type
        try:
            self.state = 311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                localctx.a0 = self.tpDefTest()
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 259
                    localctx.l0 = self.tpDefTestList()


                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 262
                    self.match(Python3Parser.COMMA)
                    self.state = 285
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 263
                        self.match(Python3Parser.STAR)
                        self.state = 265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 264
                            localctx.va = self.tpDef()


                        self.state = 268
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                        if la_ == 1:
                            self.state = 267
                            localctx.l1 = self.tpDefTestList()


                        self.state = 278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 270
                            self.match(Python3Parser.COMMA)
                            self.state = 276
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 271
                                self.match(Python3Parser.POWER)
                                self.state = 272
                                localctx.vk = self.tpDef()
                                self.state = 274
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 273
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 280
                        self.match(Python3Parser.POWER)
                        self.state = 281
                        localctx.vk = self.tpDef()
                        self.state = 283
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 282
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.match(Python3Parser.STAR)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 290
                    localctx.va = self.tpDef()


                self.state = 294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 293
                    localctx.l2 = self.tpDefTestList()


                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 296
                    self.match(Python3Parser.COMMA)
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 297
                        self.match(Python3Parser.POWER)
                        self.state = 298
                        localctx.vk = self.tpDef()
                        self.state = 300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 299
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.match(Python3Parser.POWER)
                self.state = 307
                localctx.vk = self.tpDef()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 308
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TpDefTestListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def tpDefTest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TpDefTestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TpDefTestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_tpDefTestList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTpDefTestList" ):
                listener.enterTpDefTestList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTpDefTestList" ):
                listener.exitTpDefTestList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTpDefTestList" ):
                return visitor.visitTpDefTestList(self)
            else:
                return visitor.visitChildren(self)




    def tpDefTestList(self):

        localctx = Python3Parser.TpDefTestListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tpDefTestList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 313
                    self.match(Python3Parser.COMMA)
                    self.state = 314
                    self.tpDefTest()

                else:
                    raise NoViableAltException(self)
                self.state = 317 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TpDefTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tpDef(self):
            return self.getTypedRuleContext(Python3Parser.TpDefContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tpDefTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTpDefTest" ):
                listener.enterTpDefTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTpDefTest" ):
                listener.exitTpDefTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTpDefTest" ):
                return visitor.visitTpDefTest(self)
            else:
                return visitor.visitChildren(self)




    def tpDefTest(self):

        localctx = Python3Parser.TpDefTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_tpDefTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.tpDef()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 320
                self.match(Python3Parser.ASSIGN)
                self.state = 321
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TpDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tpDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTpDef" ):
                listener.enterTpDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTpDef" ):
                listener.exitTpDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTpDef" ):
                return visitor.visitTpDef(self)
            else:
                return visitor.visitChildren(self)




    def tpDef(self):

        localctx = Python3Parser.TpDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_tpDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(Python3Parser.NAME)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COLON:
                self.state = 325
                self.match(Python3Parser.COLON)
                self.state = 326
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpDefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpDefContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargsList" ):
                listener.enterVarargsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargsList" ):
                listener.exitVarargsList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargsList" ):
                return visitor.visitVarargsList(self)
            else:
                return visitor.visitChildren(self)




    def varargsList(self):

        localctx = Python3Parser.VarargsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_varargsList)
        self._la = 0 # Token type
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.vfpDef()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 330
                    self.match(Python3Parser.ASSIGN)
                    self.state = 331
                    self.test()


                self.state = 342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 334
                        self.match(Python3Parser.COMMA)
                        self.state = 335
                        self.vfpDef()
                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 336
                            self.match(Python3Parser.ASSIGN)
                            self.state = 337
                            self.test()

                 
                    self.state = 344
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 345
                    self.match(Python3Parser.COMMA)
                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 346
                        self.match(Python3Parser.STAR)
                        self.state = 348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 347
                            self.vfpDef()


                        self.state = 358
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 350
                                self.match(Python3Parser.COMMA)
                                self.state = 351
                                self.vfpDef()
                                self.state = 354
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 352
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 353
                                    self.test()

                         
                            self.state = 360
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                        self.state = 369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 361
                            self.match(Python3Parser.COMMA)
                            self.state = 367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 362
                                self.match(Python3Parser.POWER)
                                self.state = 363
                                self.vfpDef()
                                self.state = 365
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 364
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 371
                        self.match(Python3Parser.POWER)
                        self.state = 372
                        self.vfpDef()
                        self.state = 374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 373
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 380
                self.match(Python3Parser.STAR)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 381
                    self.vfpDef()


                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 384
                        self.match(Python3Parser.COMMA)
                        self.state = 385
                        self.vfpDef()
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 386
                            self.match(Python3Parser.ASSIGN)
                            self.state = 387
                            self.test()

                 
                    self.state = 394
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 395
                    self.match(Python3Parser.COMMA)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 396
                        self.match(Python3Parser.POWER)
                        self.state = 397
                        self.vfpDef()
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 398
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(Python3Parser.POWER)
                self.state = 406
                self.vfpDef()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 407
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpDef" ):
                listener.enterVfpDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpDef" ):
                listener.exitVfpDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpDef" ):
                return visitor.visitVfpDef(self)
            else:
                return visitor.visitChildren(self)




    def vfpDef(self):

        localctx = Python3Parser.VfpDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_vfpDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(Python3Parser.SimpleStmtContext,0)


        def compoundStmt(self):
            return self.getTypedRuleContext(Python3Parser.CompoundStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_stmt)
        try:
            self.state = 416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.simpleStmt()
                pass
            elif token in [Python3Parser.ASYNC, Python3Parser.CLASS, Python3Parser.DEF, Python3Parser.FOR, Python3Parser.IF, Python3Parser.TRY, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.compoundStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def smallStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SmallStmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SmallStmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStmt" ):
                return visitor.visitSimpleStmt(self)
            else:
                return visitor.visitChildren(self)




    def simpleStmt(self):

        localctx = Python3Parser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_simpleStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.smallStmt()
            self.state = 423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 419
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 420
                    self.smallStmt() 
                self.state = 425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 426
                self.match(Python3Parser.SEMI_COLON)


            self.state = 429
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SmallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(Python3Parser.ExprStmtContext,0)


        def delStmt(self):
            return self.getTypedRuleContext(Python3Parser.DelStmtContext,0)


        def passStmt(self):
            return self.getTypedRuleContext(Python3Parser.PassStmtContext,0)


        def flowStmt(self):
            return self.getTypedRuleContext(Python3Parser.FlowStmtContext,0)


        def importStmt(self):
            return self.getTypedRuleContext(Python3Parser.ImportStmtContext,0)


        def globalStmt(self):
            return self.getTypedRuleContext(Python3Parser.GlobalStmtContext,0)


        def nonlocalStmt(self):
            return self.getTypedRuleContext(Python3Parser.NonlocalStmtContext,0)


        def assertStmt(self):
            return self.getTypedRuleContext(Python3Parser.AssertStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_smallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallStmt" ):
                listener.enterSmallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallStmt" ):
                listener.exitSmallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallStmt" ):
                return visitor.visitSmallStmt(self)
            else:
                return visitor.visitChildren(self)




    def smallStmt(self):

        localctx = Python3Parser.SmallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_smallStmt)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.exprStmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.delStmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 433
                self.passStmt()
                pass
            elif token in [Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 434
                self.flowStmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 435
                self.importStmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 436
                self.globalStmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 437
                self.nonlocalStmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 438
                self.assertStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testListStarExpr(self):
            return self.getTypedRuleContext(Python3Parser.TestListStarExprContext,0)


        def exprStmtCont(self):
            return self.getTypedRuleContext(Python3Parser.ExprStmtContContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = Python3Parser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.testListStarExpr()
            self.state = 442
            self.exprStmtCont()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_exprStmtCont

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignExprStmtContContext(ExprStmtContContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ExprStmtContContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)
        def yieldExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.YieldExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.YieldExprContext,i)

        def testListStarExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestListStarExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestListStarExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignExprStmtCont" ):
                listener.enterAssignExprStmtCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignExprStmtCont" ):
                listener.exitAssignExprStmtCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignExprStmtCont" ):
                return visitor.visitAssignExprStmtCont(self)
            else:
                return visitor.visitChildren(self)


    class AugAssignExprStmtContContext(ExprStmtContContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ExprStmtContContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def augAssign(self):
            return self.getTypedRuleContext(Python3Parser.AugAssignContext,0)

        def yieldExpr(self):
            return self.getTypedRuleContext(Python3Parser.YieldExprContext,0)

        def testList(self):
            return self.getTypedRuleContext(Python3Parser.TestListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugAssignExprStmtCont" ):
                listener.enterAugAssignExprStmtCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugAssignExprStmtCont" ):
                listener.exitAugAssignExprStmtCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugAssignExprStmtCont" ):
                return visitor.visitAugAssignExprStmtCont(self)
            else:
                return visitor.visitChildren(self)


    class AnnAssignExprStmtContContext(ExprStmtContContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ExprStmtContContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def annAssign(self):
            return self.getTypedRuleContext(Python3Parser.AnnAssignContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnAssignExprStmtCont" ):
                listener.enterAnnAssignExprStmtCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnAssignExprStmtCont" ):
                listener.exitAnnAssignExprStmtCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnAssignExprStmtCont" ):
                return visitor.visitAnnAssignExprStmtCont(self)
            else:
                return visitor.visitChildren(self)



    def exprStmtCont(self):

        localctx = Python3Parser.ExprStmtContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_exprStmtCont)
        self._la = 0 # Token type
        try:
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                localctx = Python3Parser.AnnAssignExprStmtContContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.annAssign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.IDIV_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.XOR_ASSIGN]:
                localctx = Python3Parser.AugAssignExprStmtContContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.augAssign()
                self.state = 448
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 446
                    self.yieldExpr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                    self.state = 447
                    self.testList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.ASSIGN, Python3Parser.SEMI_COLON]:
                localctx = Python3Parser.AssignExprStmtContContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 450
                    self.match(Python3Parser.ASSIGN)
                    self.state = 453
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 451
                        self.yieldExpr()
                        pass
                    elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                        self.state = 452
                        self.testListStarExpr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnAssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnAssign" ):
                listener.enterAnnAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnAssign" ):
                listener.exitAnnAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnAssign" ):
                return visitor.visitAnnAssign(self)
            else:
                return visitor.visitChildren(self)




    def annAssign(self):

        localctx = Python3Parser.AnnAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_annAssign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(Python3Parser.COLON)
            self.state = 463
            self.test()
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 464
                self.match(Python3Parser.ASSIGN)
                self.state = 465
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestListStarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def starExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StarExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StarExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testListStarExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestListStarExpr" ):
                listener.enterTestListStarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestListStarExpr" ):
                listener.exitTestListStarExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestListStarExpr" ):
                return visitor.visitTestListStarExpr(self)
            else:
                return visitor.visitChildren(self)




    def testListStarExpr(self):

        localctx = Python3Parser.TestListStarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_testListStarExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.state = 468
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 469
                self.starExpr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 472
                    self.match(Python3Parser.COMMA)
                    self.state = 475
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                        self.state = 473
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 474
                        self.starExpr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 482
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugAssignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugAssign" ):
                listener.enterAugAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugAssign" ):
                listener.exitAugAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugAssign" ):
                return visitor.visitAugAssign(self)
            else:
                return visitor.visitChildren(self)




    def augAssign(self):

        localctx = Python3Parser.AugAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_augAssign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            _la = self._input.LA(1)
            if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & ((1 << (Python3Parser.ADD_ASSIGN - 50)) | (1 << (Python3Parser.AND_ASSIGN - 50)) | (1 << (Python3Parser.AT_ASSIGN - 50)) | (1 << (Python3Parser.DIV_ASSIGN - 50)) | (1 << (Python3Parser.IDIV_ASSIGN - 50)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 50)) | (1 << (Python3Parser.MOD_ASSIGN - 50)) | (1 << (Python3Parser.MULT_ASSIGN - 50)) | (1 << (Python3Parser.OR_ASSIGN - 50)) | (1 << (Python3Parser.POWER_ASSIGN - 50)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 50)) | (1 << (Python3Parser.SUB_ASSIGN - 50)) | (1 << (Python3Parser.XOR_ASSIGN - 50)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprList(self):
            return self.getTypedRuleContext(Python3Parser.ExprListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_delStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelStmt" ):
                listener.enterDelStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelStmt" ):
                listener.exitDelStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelStmt" ):
                return visitor.visitDelStmt(self)
            else:
                return visitor.visitChildren(self)




    def delStmt(self):

        localctx = Python3Parser.DelStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_delStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(Python3Parser.DEL)
            self.state = 488
            self.exprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PassStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_passStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassStmt" ):
                listener.enterPassStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassStmt" ):
                listener.exitPassStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPassStmt" ):
                return visitor.visitPassStmt(self)
            else:
                return visitor.visitChildren(self)




    def passStmt(self):

        localctx = Python3Parser.PassStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_passStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def breakStmt(self):
            return self.getTypedRuleContext(Python3Parser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(Python3Parser.ContinueStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(Python3Parser.ReturnStmtContext,0)


        def raiseStmt(self):
            return self.getTypedRuleContext(Python3Parser.RaiseStmtContext,0)


        def yieldStmt(self):
            return self.getTypedRuleContext(Python3Parser.YieldStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flowStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowStmt" ):
                listener.enterFlowStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowStmt" ):
                listener.exitFlowStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowStmt" ):
                return visitor.visitFlowStmt(self)
            else:
                return visitor.visitChildren(self)




    def flowStmt(self):

        localctx = Python3Parser.FlowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_flowStmt)
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.breakStmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.continueStmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.returnStmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.raiseStmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 496
                self.yieldStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = Python3Parser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStmt" ):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)




    def continueStmt(self):

        localctx = Python3Parser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testList(self):
            return self.getTypedRuleContext(Python3Parser.TestListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = Python3Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(Python3Parser.RETURN)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                self.state = 504
                self.testList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yieldExpr(self):
            return self.getTypedRuleContext(Python3Parser.YieldExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yieldStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStmt" ):
                listener.enterYieldStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStmt" ):
                listener.exitYieldStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldStmt" ):
                return visitor.visitYieldStmt(self)
            else:
                return visitor.visitChildren(self)




    def yieldStmt(self):

        localctx = Python3Parser.YieldStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_yieldStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.yieldExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raiseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStmt" ):
                listener.enterRaiseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStmt" ):
                listener.exitRaiseStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseStmt" ):
                return visitor.visitRaiseStmt(self)
            else:
                return visitor.visitChildren(self)




    def raiseStmt(self):

        localctx = Python3Parser.RaiseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_raiseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(Python3Parser.RAISE)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                self.state = 510
                self.test()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 511
                    self.match(Python3Parser.FROM)
                    self.state = 512
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importName(self):
            return self.getTypedRuleContext(Python3Parser.ImportNameContext,0)


        def importFrom(self):
            return self.getTypedRuleContext(Python3Parser.ImportFromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_importStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStmt" ):
                listener.enterImportStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStmt" ):
                listener.exitImportStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportStmt" ):
                return visitor.visitImportStmt(self)
            else:
                return visitor.visitChildren(self)




    def importStmt(self):

        localctx = Python3Parser.ImportStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_importStmt)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.importName()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.importFrom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dottedAsNames(self):
            return self.getTypedRuleContext(Python3Parser.DottedAsNamesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_importName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportName" ):
                listener.enterImportName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportName" ):
                listener.exitImportName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportName" ):
                return visitor.visitImportName(self)
            else:
                return visitor.visitChildren(self)




    def importName(self):

        localctx = Python3Parser.ImportNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_importName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(Python3Parser.IMPORT)
            self.state = 522
            self.dottedAsNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportFromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dottedName(self):
            return self.getTypedRuleContext(Python3Parser.DottedNameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def importAsNames(self):
            return self.getTypedRuleContext(Python3Parser.ImportAsNamesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_importFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFrom" ):
                listener.enterImportFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFrom" ):
                listener.exitImportFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportFrom" ):
                return visitor.visitImportFrom(self)
            else:
                return visitor.visitChildren(self)




    def importFrom(self):

        localctx = Python3Parser.ImportFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_importFrom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(Python3Parser.FROM)
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 525
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 531
                self.dottedName()
                pass

            elif la_ == 2:
                self.state = 533 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 532
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 535 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 539
            self.match(Python3Parser.IMPORT)
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 540
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 541
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 542
                self.importAsNames()
                self.state = 543
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 545
                self.importAsNames()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAsNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_importAsName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAsName" ):
                listener.enterImportAsName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAsName" ):
                listener.exitImportAsName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAsName" ):
                return visitor.visitImportAsName(self)
            else:
                return visitor.visitChildren(self)




    def importAsName(self):

        localctx = Python3Parser.ImportAsNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_importAsName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(Python3Parser.NAME)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 549
                self.match(Python3Parser.AS)
                self.state = 550
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedAsNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedName(self):
            return self.getTypedRuleContext(Python3Parser.DottedNameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dottedAsName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedAsName" ):
                listener.enterDottedAsName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedAsName" ):
                listener.exitDottedAsName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedAsName" ):
                return visitor.visitDottedAsName(self)
            else:
                return visitor.visitChildren(self)




    def dottedAsName(self):

        localctx = Python3Parser.DottedAsNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dottedAsName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.dottedName()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 554
                self.match(Python3Parser.AS)
                self.state = 555
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAsNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importAsName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ImportAsNameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ImportAsNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_importAsNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAsNames" ):
                listener.enterImportAsNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAsNames" ):
                listener.exitImportAsNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAsNames" ):
                return visitor.visitImportAsNames(self)
            else:
                return visitor.visitChildren(self)




    def importAsNames(self):

        localctx = Python3Parser.ImportAsNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_importAsNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.importAsName()
            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self.match(Python3Parser.COMMA)
                    self.state = 560
                    self.importAsName() 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 566
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedAsNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedAsName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DottedAsNameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DottedAsNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dottedAsNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedAsNames" ):
                listener.enterDottedAsNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedAsNames" ):
                listener.exitDottedAsNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedAsNames" ):
                return visitor.visitDottedAsNames(self)
            else:
                return visitor.visitChildren(self)




    def dottedAsNames(self):

        localctx = Python3Parser.DottedAsNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dottedAsNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.dottedAsName()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 570
                self.match(Python3Parser.COMMA)
                self.state = 571
                self.dottedAsName()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dottedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedName" ):
                listener.enterDottedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedName" ):
                listener.exitDottedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedName" ):
                return visitor.visitDottedName(self)
            else:
                return visitor.visitChildren(self)




    def dottedName(self):

        localctx = Python3Parser.DottedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dottedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(Python3Parser.NAME)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 578
                self.match(Python3Parser.DOT)
                self.state = 579
                self.match(Python3Parser.NAME)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_globalStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStmt" ):
                listener.enterGlobalStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStmt" ):
                listener.exitGlobalStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalStmt" ):
                return visitor.visitGlobalStmt(self)
            else:
                return visitor.visitChildren(self)




    def globalStmt(self):

        localctx = Python3Parser.GlobalStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_globalStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Python3Parser.GLOBAL)
            self.state = 586
            self.match(Python3Parser.NAME)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 587
                self.match(Python3Parser.COMMA)
                self.state = 588
                self.match(Python3Parser.NAME)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonlocalStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocalStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocalStmt" ):
                listener.enterNonlocalStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocalStmt" ):
                listener.exitNonlocalStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocalStmt" ):
                return visitor.visitNonlocalStmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocalStmt(self):

        localctx = Python3Parser.NonlocalStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_nonlocalStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(Python3Parser.NONLOCAL)
            self.state = 595
            self.match(Python3Parser.NAME)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 596
                self.match(Python3Parser.COMMA)
                self.state = 597
                self.match(Python3Parser.NAME)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStmt" ):
                listener.enterAssertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStmt" ):
                listener.exitAssertStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertStmt" ):
                return visitor.visitAssertStmt(self)
            else:
                return visitor.visitChildren(self)




    def assertStmt(self):

        localctx = Python3Parser.AssertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assertStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(Python3Parser.ASSERT)
            self.state = 604
            self.test()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 605
                self.match(Python3Parser.COMMA)
                self.state = 606
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStmt(self):
            return self.getTypedRuleContext(Python3Parser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(Python3Parser.WhileStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(Python3Parser.ForStmtContext,0)


        def tryStmt(self):
            return self.getTypedRuleContext(Python3Parser.TryStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(Python3Parser.WithStmtContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(Python3Parser.FuncDefContext,0)


        def classDef(self):
            return self.getTypedRuleContext(Python3Parser.ClassDefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def asyncStmt(self):
            return self.getTypedRuleContext(Python3Parser.AsyncStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compoundStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStmt" ):
                listener.enterCompoundStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStmt" ):
                listener.exitCompoundStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStmt" ):
                return visitor.visitCompoundStmt(self)
            else:
                return visitor.visitChildren(self)




    def compoundStmt(self):

        localctx = Python3Parser.CompoundStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundStmt)
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.ifStmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.whileStmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.forStmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 612
                self.tryStmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.withStmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 614
                self.funcDef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 615
                self.classDef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 616
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 617
                self.asyncStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsyncStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcDef(self):
            return self.getTypedRuleContext(Python3Parser.FuncDefContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(Python3Parser.WithStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(Python3Parser.ForStmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_asyncStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsyncStmt" ):
                listener.enterAsyncStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsyncStmt" ):
                listener.exitAsyncStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsyncStmt" ):
                return visitor.visitAsyncStmt(self)
            else:
                return visitor.visitChildren(self)




    def asyncStmt(self):

        localctx = Python3Parser.AsyncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_asyncStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(Python3Parser.ASYNC)
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 621
                self.funcDef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 622
                self.withStmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 623
                self.forStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = Python3Parser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(Python3Parser.IF)
            self.state = 627
            self.test()
            self.state = 628
            self.match(Python3Parser.COLON)
            self.state = 629
            self.suite()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 630
                self.match(Python3Parser.ELIF)
                self.state = 631
                self.test()
                self.state = 632
                self.match(Python3Parser.COLON)
                self.state = 633
                self.suite()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 640
                self.match(Python3Parser.ELSE)
                self.state = 641
                self.match(Python3Parser.COLON)
                self.state = 642
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = Python3Parser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_whileStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(Python3Parser.WHILE)
            self.state = 646
            self.test()
            self.state = 647
            self.match(Python3Parser.COLON)
            self.state = 648
            self.suite()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 649
                self.match(Python3Parser.ELSE)
                self.state = 650
                self.match(Python3Parser.COLON)
                self.state = 651
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprList(self):
            return self.getTypedRuleContext(Python3Parser.ExprListContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testList(self):
            return self.getTypedRuleContext(Python3Parser.TestListContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = Python3Parser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(Python3Parser.FOR)
            self.state = 655
            self.exprList()
            self.state = 656
            self.match(Python3Parser.IN)
            self.state = 657
            self.testList()
            self.state = 658
            self.match(Python3Parser.COLON)
            self.state = 659
            self.suite()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 660
                self.match(Python3Parser.ELSE)
                self.state = 661
                self.match(Python3Parser.COLON)
                self.state = 662
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def exceptClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExceptClauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExceptClauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_tryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStmt" ):
                listener.enterTryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStmt" ):
                listener.exitTryStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStmt" ):
                return visitor.visitTryStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryStmt(self):

        localctx = Python3Parser.TryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tryStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(Python3Parser.TRY)
            self.state = 666
            self.match(Python3Parser.COLON)
            self.state = 667
            self.suite()
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 668
                    self.exceptClause()
                    self.state = 669
                    self.match(Python3Parser.COLON)
                    self.state = 670
                    self.suite()
                    self.state = 674 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 676
                    self.match(Python3Parser.ELSE)
                    self.state = 677
                    self.match(Python3Parser.COLON)
                    self.state = 678
                    self.suite()


                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 681
                    self.match(Python3Parser.FINALLY)
                    self.state = 682
                    self.match(Python3Parser.COLON)
                    self.state = 683
                    self.suite()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 686
                self.match(Python3Parser.FINALLY)
                self.state = 687
                self.match(Python3Parser.COLON)
                self.state = 688
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def withItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.WithItemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.WithItemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithStmt" ):
                return visitor.visitWithStmt(self)
            else:
                return visitor.visitChildren(self)




    def withStmt(self):

        localctx = Python3Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(Python3Parser.WITH)
            self.state = 692
            self.withItem()
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 693
                self.match(Python3Parser.COMMA)
                self.state = 694
                self.withItem()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 700
            self.match(Python3Parser.COLON)
            self.state = 701
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_withItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithItem" ):
                listener.enterWithItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithItem" ):
                listener.exitWithItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithItem" ):
                return visitor.visitWithItem(self)
            else:
                return visitor.visitChildren(self)




    def withItem(self):

        localctx = Python3Parser.WithItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_withItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.test()
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 704
                self.match(Python3Parser.AS)
                self.state = 705
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_exceptClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptClause" ):
                listener.enterExceptClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptClause" ):
                listener.exitExceptClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptClause" ):
                return visitor.visitExceptClause(self)
            else:
                return visitor.visitChildren(self)




    def exceptClause(self):

        localctx = Python3Parser.ExceptClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_exceptClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(Python3Parser.EXCEPT)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                self.state = 709
                self.test()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 710
                    self.match(Python3Parser.AS)
                    self.state = 711
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(Python3Parser.SimpleStmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.simpleStmt()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.match(Python3Parser.NEWLINE)
                self.state = 718
                self.match(Python3Parser.INDENT)
                self.state = 720 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 719
                    self.stmt()
                    self.state = 722 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD) | (1 << Python3Parser.AT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0)):
                        break

                self.state = 724
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orTest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.OrTestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.OrTestContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambaDef(self):
            return self.getTypedRuleContext(Python3Parser.LambaDefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.orTest()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 729
                    self.match(Python3Parser.IF)
                    self.state = 730
                    self.orTest()
                    self.state = 731
                    self.match(Python3Parser.ELSE)
                    self.state = 732
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.lambaDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestNoCondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orTest(self):
            return self.getTypedRuleContext(Python3Parser.OrTestContext,0)


        def lambaDefNoCond(self):
            return self.getTypedRuleContext(Python3Parser.LambaDefNoCondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_testNoCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestNoCond" ):
                listener.enterTestNoCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestNoCond" ):
                listener.exitTestNoCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestNoCond" ):
                return visitor.visitTestNoCond(self)
            else:
                return visitor.visitChildren(self)




    def testNoCond(self):

        localctx = Python3Parser.TestNoCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_testNoCond)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.orTest()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.lambaDefNoCond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambaDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargsList(self):
            return self.getTypedRuleContext(Python3Parser.VarargsListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambaDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambaDef" ):
                listener.enterLambaDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambaDef" ):
                listener.exitLambaDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambaDef" ):
                return visitor.visitLambaDef(self)
            else:
                return visitor.visitChildren(self)




    def lambaDef(self):

        localctx = Python3Parser.LambaDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_lambaDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(Python3Parser.LAMBDA)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (Python3Parser.NAME - 40)) | (1 << (Python3Parser.POWER - 40)) | (1 << (Python3Parser.STAR - 40)))) != 0):
                self.state = 744
                self.varargsList()


            self.state = 747
            self.match(Python3Parser.COLON)
            self.state = 748
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambaDefNoCondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def testNoCond(self):
            return self.getTypedRuleContext(Python3Parser.TestNoCondContext,0)


        def varargsList(self):
            return self.getTypedRuleContext(Python3Parser.VarargsListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambaDefNoCond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambaDefNoCond" ):
                listener.enterLambaDefNoCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambaDefNoCond" ):
                listener.exitLambaDefNoCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambaDefNoCond" ):
                return visitor.visitLambaDefNoCond(self)
            else:
                return visitor.visitChildren(self)




    def lambaDefNoCond(self):

        localctx = Python3Parser.LambaDefNoCondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_lambaDefNoCond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(Python3Parser.LAMBDA)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (Python3Parser.NAME - 40)) | (1 << (Python3Parser.POWER - 40)) | (1 << (Python3Parser.STAR - 40)))) != 0):
                self.state = 751
                self.varargsList()


            self.state = 754
            self.match(Python3Parser.COLON)
            self.state = 755
            self.testNoCond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andTest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AndTestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AndTestContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_orTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrTest" ):
                listener.enterOrTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrTest" ):
                listener.exitOrTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrTest" ):
                return visitor.visitOrTest(self)
            else:
                return visitor.visitChildren(self)




    def orTest(self):

        localctx = Python3Parser.OrTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_orTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.andTest()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 758
                self.match(Python3Parser.OR)
                self.state = 759
                self.andTest()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notTest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NotTestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NotTestContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_andTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndTest" ):
                listener.enterAndTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndTest" ):
                listener.exitAndTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndTest" ):
                return visitor.visitAndTest(self)
            else:
                return visitor.visitChildren(self)




    def andTest(self):

        localctx = Python3Parser.AndTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_andTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.notTest()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 766
                self.match(Python3Parser.AND)
                self.state = 767
                self.notTest()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def notTest(self):
            return self.getTypedRuleContext(Python3Parser.NotTestContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_notTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotTest" ):
                listener.enterNotTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotTest" ):
                listener.exitNotTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotTest" ):
                return visitor.visitNotTest(self)
            else:
                return visitor.visitChildren(self)




    def notTest(self):

        localctx = Python3Parser.NotTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_notTest)
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.match(Python3Parser.NOT)
                self.state = 774
                self.notTest()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def compOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.CompOpContext)
            else:
                return self.getTypedRuleContext(Python3Parser.CompOpContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expr()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (Python3Parser.IN - 24)) | (1 << (Python3Parser.IS - 24)) | (1 << (Python3Parser.NOT - 24)) | (1 << (Python3Parser.EQUALS - 24)) | (1 << (Python3Parser.GREATER_THAN - 24)) | (1 << (Python3Parser.GT_EQ - 24)) | (1 << (Python3Parser.LESS_THAN - 24)) | (1 << (Python3Parser.LT_EQ - 24)) | (1 << (Python3Parser.NOT_EQ_1 - 24)) | (1 << (Python3Parser.NOT_EQ_2 - 24)))) != 0):
                self.state = 779
                self.compOp()
                self.state = 780
                self.expr()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompOp" ):
                return visitor.visitCompOp(self)
            else:
                return visitor.visitChildren(self)




    def compOp(self):

        localctx = Python3Parser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_compOp)
        try:
            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 791
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 792
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 793
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 794
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 795
                self.match(Python3Parser.NOT)
                self.state = 796
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 797
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 798
                self.match(Python3Parser.IS)
                self.state = 799
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StarExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_starExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarExpr" ):
                listener.enterStarExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarExpr" ):
                listener.exitStarExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarExpr" ):
                return visitor.visitStarExpr(self)
            else:
                return visitor.visitChildren(self)




    def starExpr(self):

        localctx = Python3Parser.StarExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_starExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(Python3Parser.STAR)
            self.state = 803
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xorExpr(self):
            return self.getTypedRuleContext(Python3Parser.XorExprContext,0)


        def exprCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.xorExpr()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 806
                self.exprCont()
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def xorExpr(self):
            return self.getTypedRuleContext(Python3Parser.XorExprContext,0)


        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprCont" ):
                listener.enterExprCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprCont" ):
                listener.exitExprCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprCont" ):
                return visitor.visitExprCont(self)
            else:
                return visitor.visitChildren(self)




    def exprCont(self):

        localctx = Python3Parser.ExprContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_exprCont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            localctx.op = self.match(Python3Parser.OR_OP)
            self.state = 813
            self.xorExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpr(self):
            return self.getTypedRuleContext(Python3Parser.AndExprContext,0)


        def xorExprCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.XorExprContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.XorExprContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_xorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorExpr" ):
                listener.enterXorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorExpr" ):
                listener.exitXorExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXorExpr" ):
                return visitor.visitXorExpr(self)
            else:
                return visitor.visitChildren(self)




    def xorExpr(self):

        localctx = Python3Parser.XorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_xorExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.andExpr()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.XOR:
                self.state = 816
                self.xorExprCont()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorExprContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def andExpr(self):
            return self.getTypedRuleContext(Python3Parser.AndExprContext,0)


        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_xorExprCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorExprCont" ):
                listener.enterXorExprCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorExprCont" ):
                listener.exitXorExprCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXorExprCont" ):
                return visitor.visitXorExprCont(self)
            else:
                return visitor.visitChildren(self)




    def xorExprCont(self):

        localctx = Python3Parser.XorExprContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_xorExprCont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            localctx.op = self.match(Python3Parser.XOR)
            self.state = 823
            self.andExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpr(self):
            return self.getTypedRuleContext(Python3Parser.ShiftExprContext,0)


        def andExprCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AndExprContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AndExprContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpr" ):
                return visitor.visitAndExpr(self)
            else:
                return visitor.visitChildren(self)




    def andExpr(self):

        localctx = Python3Parser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_andExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.shiftExpr()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND_OP:
                self.state = 826
                self.andExprCont()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def shiftExpr(self):
            return self.getTypedRuleContext(Python3Parser.ShiftExprContext,0)


        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_andExprCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExprCont" ):
                listener.enterAndExprCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExprCont" ):
                listener.exitAndExprCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExprCont" ):
                return visitor.visitAndExprCont(self)
            else:
                return visitor.visitChildren(self)




    def andExprCont(self):

        localctx = Python3Parser.AndExprContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_andExprCont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            localctx.op = self.match(Python3Parser.AND_OP)
            self.state = 833
            self.shiftExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithExpr(self):
            return self.getTypedRuleContext(Python3Parser.ArithExprContext,0)


        def shiftExprCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ShiftExprContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ShiftExprContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_shiftExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpr" ):
                listener.enterShiftExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpr" ):
                listener.exitShiftExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpr" ):
                return visitor.visitShiftExpr(self)
            else:
                return visitor.visitChildren(self)




    def shiftExpr(self):

        localctx = Python3Parser.ShiftExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_shiftExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.arithExpr()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT:
                self.state = 836
                self.shiftExprCont()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExprContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def arithExpr(self):
            return self.getTypedRuleContext(Python3Parser.ArithExprContext,0)


        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_shiftExprCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExprCont" ):
                listener.enterShiftExprCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExprCont" ):
                listener.exitShiftExprCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExprCont" ):
                return visitor.visitShiftExprCont(self)
            else:
                return visitor.visitChildren(self)




    def shiftExprCont(self):

        localctx = Python3Parser.ShiftExprContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_shiftExprCont)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 843
            self.arithExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(Python3Parser.TermContext,0)


        def arithExprCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArithExprContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArithExprContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_arithExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithExpr" ):
                listener.enterArithExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithExpr" ):
                listener.exitArithExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithExpr" ):
                return visitor.visitArithExpr(self)
            else:
                return visitor.visitChildren(self)




    def arithExpr(self):

        localctx = Python3Parser.ArithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_arithExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.term()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ADD or _la==Python3Parser.MINUS:
                self.state = 846
                self.arithExprCont()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithExprContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def term(self):
            return self.getTypedRuleContext(Python3Parser.TermContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_arithExprCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithExprCont" ):
                listener.enterArithExprCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithExprCont" ):
                listener.exitArithExprCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithExprCont" ):
                return visitor.visitArithExprCont(self)
            else:
                return visitor.visitChildren(self)




    def arithExprCont(self):

        localctx = Python3Parser.ArithExprContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_arithExprCont)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 853
            self.term()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def termCont(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.factor()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (Python3Parser.AT - 55)) | (1 << (Python3Parser.DIV - 55)) | (1 << (Python3Parser.IDIV - 55)) | (1 << (Python3Parser.MOD - 55)) | (1 << (Python3Parser.STAR - 55)))) != 0):
                self.state = 856
                self.termCont()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_termCont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermCont" ):
                listener.enterTermCont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermCont" ):
                listener.exitTermCont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermCont" ):
                return visitor.visitTermCont(self)
            else:
                return visitor.visitChildren(self)




    def termCont(self):

        localctx = Python3Parser.TermContContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_termCont)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (Python3Parser.AT - 55)) | (1 << (Python3Parser.DIV - 55)) | (1 << (Python3Parser.IDIV - 55)) | (1 << (Python3Parser.MOD - 55)) | (1 << (Python3Parser.STAR - 55)))) != 0)):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 863
            self.factor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (Python3Parser.ADD - 49)) | (1 << (Python3Parser.MINUS - 49)) | (1 << (Python3Parser.NOT_OP - 49)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 866
                self.factor()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atomExpr(self):
            return self.getTypedRuleContext(Python3Parser.AtomExprContext,0)


        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.atomExpr()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.POWER:
                self.state = 871
                localctx.op = self.match(Python3Parser.POWER)
                self.state = 872
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atomExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)




    def atomExpr(self):

        localctx = Python3Parser.AtomExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_atomExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 875
                self.match(Python3Parser.AWAIT)


            self.state = 878
            self.atom()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.DOT - 64)) | (1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.OPEN_PAREN - 64)))) != 0):
                self.state = 879
                self.trailer()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DictOrSetAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)
        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)
        def dictOrSetMaker(self):
            return self.getTypedRuleContext(Python3Parser.DictOrSetMakerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictOrSetAtom" ):
                listener.enterDictOrSetAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictOrSetAtom" ):
                listener.exitDictOrSetAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictOrSetAtom" ):
                return visitor.visitDictOrSetAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def const(self):
            return self.getTypedRuleContext(Python3Parser.ConstContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstAtom" ):
                listener.enterConstAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstAtom" ):
                listener.exitConstAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstAtom" ):
                return visitor.visitConstAtom(self)
            else:
                return visitor.visitChildren(self)


    class ParenAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)
        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)
        def yieldExpr(self):
            return self.getTypedRuleContext(Python3Parser.YieldExprContext,0)

        def testListComp(self):
            return self.getTypedRuleContext(Python3Parser.TestListCompContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenAtom" ):
                listener.enterParenAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenAtom" ):
                listener.exitParenAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenAtom" ):
                return visitor.visitParenAtom(self)
            else:
                return visitor.visitChildren(self)


    class BraacketAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)
        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)
        def testListComp(self):
            return self.getTypedRuleContext(Python3Parser.TestListCompContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraacketAtom" ):
                listener.enterBraacketAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraacketAtom" ):
                listener.exitBraacketAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraacketAtom" ):
                return visitor.visitBraacketAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                localctx = Python3Parser.ParenAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 888
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 886
                    self.yieldExpr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN, Python3Parser.STAR]:
                    self.state = 887
                    self.testListComp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 890
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                localctx = Python3Parser.BraacketAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                    self.state = 892
                    self.testListComp()


                self.state = 895
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                localctx = Python3Parser.DictOrSetAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.POWER - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                    self.state = 897
                    self.dictOrSetMaker()


                self.state = 900
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ELLIPSIS]:
                localctx = Python3Parser.ConstAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.const()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst" ):
                listener.enterConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst" ):
                listener.exitConst(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst" ):
                return visitor.visitConst(self)
            else:
                return visitor.visitChildren(self)




    def const(self):

        localctx = Python3Parser.ConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_const)
        self._la = 0 # Token type
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 907 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 906
                    self.match(Python3Parser.STRING)
                    self.state = 909 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.STRING):
                        break

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 911
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 912
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 913
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 914
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestListCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def starExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StarExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StarExprContext,i)


        def compFor(self):
            return self.getTypedRuleContext(Python3Parser.CompForContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testListComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestListComp" ):
                listener.enterTestListComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestListComp" ):
                listener.exitTestListComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestListComp" ):
                return visitor.visitTestListComp(self)
            else:
                return visitor.visitChildren(self)




    def testListComp(self):

        localctx = Python3Parser.TestListCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_testListComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.state = 917
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 918
                self.starExpr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.state = 921
                self.compFor()
                pass
            elif token in [Python3Parser.CLOSE_BRACK, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 922
                        self.match(Python3Parser.COMMA)
                        self.state = 925
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                            self.state = 923
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 924
                            self.starExpr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 931
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 932
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def argList(self):
            return self.getTypedRuleContext(Python3Parser.ArgListContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptList(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptListContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.POWER - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                    self.state = 938
                    self.argList()


                self.state = 941
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 943
                self.subscriptList()
                self.state = 944
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self.match(Python3Parser.DOT)
                self.state = 947
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptList" ):
                listener.enterSubscriptList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptList" ):
                listener.exitSubscriptList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptList" ):
                return visitor.visitSubscriptList(self)
            else:
                return visitor.visitChildren(self)




    def subscriptList(self):

        localctx = Python3Parser.SubscriptListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_subscriptList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.subscript()
            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 951
                    self.match(Python3Parser.COMMA)
                    self.state = 952
                    self.subscript() 
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 958
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceOp(self):
            return self.getTypedRuleContext(Python3Parser.SliceOpContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                    self.state = 962
                    self.test()


                self.state = 965
                self.match(Python3Parser.COLON)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                    self.state = 966
                    self.test()


                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 969
                    self.sliceOp()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceOp" ):
                listener.enterSliceOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceOp" ):
                listener.exitSliceOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceOp" ):
                return visitor.visitSliceOp(self)
            else:
                return visitor.visitChildren(self)




    def sliceOp(self):

        localctx = Python3Parser.SliceOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sliceOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(Python3Parser.COLON)
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                self.state = 975
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def starExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StarExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StarExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprList" ):
                listener.enterExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprList" ):
                listener.exitExprList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprList" ):
                return visitor.visitExprList(self)
            else:
                return visitor.visitChildren(self)




    def exprList(self):

        localctx = Python3Parser.ExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_exprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.state = 978
                self.expr()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 979
                self.starExpr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 989
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 982
                    self.match(Python3Parser.COMMA)
                    self.state = 985
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                        self.state = 983
                        self.expr()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 984
                        self.starExpr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 992
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestList" ):
                listener.enterTestList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestList" ):
                listener.exitTestList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestList" ):
                return visitor.visitTestList(self)
            else:
                return visitor.visitChildren(self)




    def testList(self):

        localctx = Python3Parser.TestListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_testList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.test()
            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 996
                    self.match(Python3Parser.COMMA)
                    self.state = 997
                    self.test() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1003
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictOrSetMakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def compFor(self):
            return self.getTypedRuleContext(Python3Parser.CompForContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def starExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StarExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StarExprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_dictOrSetMaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictOrSetMaker" ):
                listener.enterDictOrSetMaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictOrSetMaker" ):
                listener.exitDictOrSetMaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictOrSetMaker" ):
                return visitor.visitDictOrSetMaker(self)
            else:
                return visitor.visitChildren(self)




    def dictOrSetMaker(self):

        localctx = Python3Parser.DictOrSetMakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dictOrSetMaker)
        self._la = 0 # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1012
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                    self.state = 1006
                    self.test()
                    self.state = 1007
                    self.match(Python3Parser.COLON)
                    self.state = 1008
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 1010
                    self.match(Python3Parser.POWER)
                    self.state = 1011
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1014
                    self.compFor()
                    pass
                elif token in [Python3Parser.CLOSE_BRACE, Python3Parser.COMMA]:
                    self.state = 1026
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1015
                            self.match(Python3Parser.COMMA)
                            self.state = 1022
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                                self.state = 1016
                                self.test()
                                self.state = 1017
                                self.match(Python3Parser.COLON)
                                self.state = 1018
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1020
                                self.match(Python3Parser.POWER)
                                self.state = 1021
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1028
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1029
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                    self.state = 1034
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1035
                    self.starExpr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1052
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1038
                    self.compFor()
                    pass
                elif token in [Python3Parser.CLOSE_BRACE, Python3Parser.COMMA]:
                    self.state = 1046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1039
                            self.match(Python3Parser.COMMA)
                            self.state = 1042
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                                self.state = 1040
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1041
                                self.starExpr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1048
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                    self.state = 1050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1049
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def argList(self):
            return self.getTypedRuleContext(Python3Parser.ArgListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDef" ):
                listener.enterClassDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDef" ):
                listener.exitClassDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDef" ):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = Python3Parser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(Python3Parser.CLASS)
            self.state = 1057
            self.match(Python3Parser.NAME)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1058
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)) | (1 << (Python3Parser.POWER - 65)) | (1 << (Python3Parser.STAR - 65)))) != 0):
                    self.state = 1059
                    self.argList()


                self.state = 1062
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1065
            self.match(Python3Parser.COLON)
            self.state = 1066
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgList" ):
                return visitor.visitArgList(self)
            else:
                return visitor.visitChildren(self)




    def argList(self):

        localctx = Python3Parser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.arg()
            self.state = 1073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1069
                    self.match(Python3Parser.COMMA)
                    self.state = 1070
                    self.arg() 
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1076
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_arg

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CompArgContext(ArgContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)

        def compFor(self):
            return self.getTypedRuleContext(Python3Parser.CompForContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompArg" ):
                listener.enterCompArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompArg" ):
                listener.exitCompArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompArg" ):
                return visitor.visitCompArg(self)
            else:
                return visitor.visitChildren(self)


    class SimpleArgContext(ArgContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleArg" ):
                listener.enterSimpleArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleArg" ):
                listener.exitSimpleArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleArg" ):
                return visitor.visitSimpleArg(self)
            else:
                return visitor.visitChildren(self)


    class ValueArgContext(ArgContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)

        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArg" ):
                listener.enterValueArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArg" ):
                listener.exitValueArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArg" ):
                return visitor.visitValueArg(self)
            else:
                return visitor.visitChildren(self)


    class StarsArgContext(ArgContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)
        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarsArg" ):
                listener.enterStarsArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarsArg" ):
                listener.exitStarsArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarsArg" ):
                return visitor.visitStarsArg(self)
            else:
                return visitor.visitChildren(self)


    class StarArgContext(ArgContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Python3Parser.ArgContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)
        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarArg" ):
                listener.enterStarArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarArg" ):
                listener.exitStarArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarArg" ):
                return visitor.visitStarArg(self)
            else:
                return visitor.visitChildren(self)



    def arg(self):

        localctx = Python3Parser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_arg)
        try:
            self.state = 1091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                localctx = Python3Parser.SimpleArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.test()
                pass

            elif la_ == 2:
                localctx = Python3Parser.CompArgContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.test()
                self.state = 1081
                self.compFor()
                pass

            elif la_ == 3:
                localctx = Python3Parser.ValueArgContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.test()
                self.state = 1084
                self.match(Python3Parser.ASSIGN)
                self.state = 1085
                self.test()
                pass

            elif la_ == 4:
                localctx = Python3Parser.StarsArgContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1087
                self.match(Python3Parser.POWER)
                self.state = 1088
                self.test()
                pass

            elif la_ == 5:
                localctx = Python3Parser.StarArgContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1089
                self.match(Python3Parser.STAR)
                self.state = 1090
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompIterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compFor(self):
            return self.getTypedRuleContext(Python3Parser.CompForContext,0)


        def compIf(self):
            return self.getTypedRuleContext(Python3Parser.CompIfContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compIter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompIter" ):
                listener.enterCompIter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompIter" ):
                listener.exitCompIter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompIter" ):
                return visitor.visitCompIter(self)
            else:
                return visitor.visitChildren(self)




    def compIter(self):

        localctx = Python3Parser.CompIterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compIter)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.compFor()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.compIf()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompForContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprList(self):
            return self.getTypedRuleContext(Python3Parser.ExprListContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def orTest(self):
            return self.getTypedRuleContext(Python3Parser.OrTestContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def compIter(self):
            return self.getTypedRuleContext(Python3Parser.CompIterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompFor" ):
                listener.enterCompFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompFor" ):
                listener.exitCompFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompFor" ):
                return visitor.visitCompFor(self)
            else:
                return visitor.visitChildren(self)




    def compFor(self):

        localctx = Python3Parser.CompForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_compFor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1097
                self.match(Python3Parser.ASYNC)


            self.state = 1100
            self.match(Python3Parser.FOR)
            self.state = 1101
            self.exprList()
            self.state = 1102
            self.match(Python3Parser.IN)
            self.state = 1103
            self.orTest()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1104
                self.compIter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def testNoCond(self):
            return self.getTypedRuleContext(Python3Parser.TestNoCondContext,0)


        def compIter(self):
            return self.getTypedRuleContext(Python3Parser.CompIterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompIf" ):
                listener.enterCompIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompIf" ):
                listener.exitCompIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompIf" ):
                return visitor.visitCompIf(self)
            else:
                return visitor.visitChildren(self)




    def compIf(self):

        localctx = Python3Parser.CompIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_compIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(Python3Parser.IF)
            self.state = 1108
            self.testNoCond()
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1109
                self.compIter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EncodingDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_encodingDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncodingDecl" ):
                listener.enterEncodingDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncodingDecl" ):
                listener.exitEncodingDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncodingDecl" ):
                return visitor.visitEncodingDecl(self)
            else:
                return visitor.visitChildren(self)




    def encodingDecl(self):

        localctx = Python3Parser.EncodingDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_encodingDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yieldArg(self):
            return self.getTypedRuleContext(Python3Parser.YieldArgContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yieldExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpr" ):
                listener.enterYieldExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpr" ):
                listener.exitYieldExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldExpr" ):
                return visitor.visitYieldExpr(self)
            else:
                return visitor.visitChildren(self)




    def yieldExpr(self):

        localctx = Python3Parser.YieldExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_yieldExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(Python3Parser.YIELD)
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ADD))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Python3Parser.ELLIPSIS - 65)) | (1 << (Python3Parser.MINUS - 65)) | (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (1 << (Python3Parser.OPEN_BRACK - 65)) | (1 << (Python3Parser.OPEN_PAREN - 65)))) != 0):
                self.state = 1115
                self.yieldArg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testList(self):
            return self.getTypedRuleContext(Python3Parser.TestListContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yieldArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldArg" ):
                listener.enterYieldArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldArg" ):
                listener.exitYieldArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYieldArg" ):
                return visitor.visitYieldArg(self)
            else:
                return visitor.visitChildren(self)




    def yieldArg(self):

        localctx = Python3Parser.YieldArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_yieldArg)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.match(Python3Parser.FROM)
                self.state = 1119
                self.test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.NAME, Python3Parser.ADD, Python3Parser.ELLIPSIS, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.testList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
