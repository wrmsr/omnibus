TODO:
 - py wrapper for Bytes to str (+ memoryviews?)
 - py wrapper for bitcasting float/double
 - py wrapper for uints?
 - py wrapper for abusing int32/64 as void*
 - bytes helper include


TODO: ***:
from cpython.bytes cimport PyBytes_AsString
    def append(self, bytes value):
        cdef int vallen = len(value)
        cdef uint8_t *pval = <uint8_t*>PyBytes_AsString(value)
        cdef uint8_vector cval;
        cval.assign(pval, pval + vallen)
        self.v.push_back(value)


https://www.nexedi.com/blog/NXD-Document.Blog.Cypclass
https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html
https://github.com/cython/cython/wiki/WrappingSetOfCppClasses
https://tillahoffmann.github.io/2016/04/18/Cpp-containers-in-cython.html

alt:
 - int8
 - uint8
 - int32
 - uint32
 - int64
 - uint64
 - float32
 - float64
 - void*
 - byte[] (vector<uint8>)
 - object

t:
 - array
 - deque
 - forward_list
 - list
 - stack
 - queue
 - priority_queue
 - multiset
 - multimap
 - unordered_multiset
 - unordered_multimap
 - bitset

https://github.com/sagemath/sage/blob/cf9673bc59b43f791747b8ff31c5f072eeab88eb/src/sage/structure/coerce_dict.pyx
https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#wrapping-cplusplus


cdef extern from "<vector>" namespace "std":
    cdef cppclass vector[T]:
        cppclass iterator:
            T operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        vector()
        void push_back(T&)
        T& operator[](int)
        T& at(int)
        iterator begin()
        iterator end()


cdef class IntVector:

    cdef vector[int] *v

    def __cinit__(self):
        self.v = new vector[int]()

    def __dealloc__(self):
        del self.v

    def push_back(self, int i):
        self.v.push_back(i)

    def print(self):
        cdef vector[int].iterator it = self.v.begin()
        while it != self.v.end():
            print(deref(it))
            inc(it)


cdef extern from "<map>" namespace "std":
    cdef cppclass map[K, V]:
        cppclass iterator:
            # T operator*()
            iterator operator++()
            bint operator==(iterator)
            bint operator!=(iterator)
        map()
        void emplace(K&, V&)
        V& operator[](K&)
        iterator begin()
        iterator end()


cdef class IntIntMap:

    cdef map[int, int] *m

    def __cinit__(self):
        self.m = new map[int, int]()

    def __dealloc__(self):
        del self.m

    def emplace(self, int k, int v):
        self.m.emplace(k, v)

    def print(self):
        cdef map[int, int].iterator it = self.m.begin()
        while it != self.m.end():
            # print(deref(it))
            inc(it)
